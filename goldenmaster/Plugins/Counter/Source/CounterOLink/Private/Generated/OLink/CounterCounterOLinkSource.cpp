/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "CounterCounterOLinkSource.h"
#include "HAL/Platform.h"
#include "OLinkCommon.h"
#if !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)
#include "Async/Future.h"
#include "Async/Async.h"
#include "Counter/Generated/api/Counter.json.adapter.h"
#include "CustomTypes/Generated/api/CustomTypes.json.adapter.h"
#include "ExternTypes/Generated/api/ExternTypes.json.adapter.h"
#include "OLinkClientConnection.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
THIRD_PARTY_INCLUDES_START
#include "olink/iobjectsource.h"
THIRD_PARTY_INCLUDES_END

using namespace ApiGear::ObjectLink;

namespace
{
static const std::string CounterCounterIdentifier{"counter.Counter"};
}

DEFINE_LOG_CATEGORY(LogCounterCounterOLinkSource);
CounterCounterOLinkSource::CounterCounterOLinkSource()
	: Host(nullptr)
{
}

void CounterCounterOLinkSource::setBackendService(TScriptInterface<ICounterCounter> InService)
{
	// only set if interface is implemented
	if (InService.GetInterface() == nullptr)
	{
		UE_LOG(LogCounterCounterOLinkSource, Error, TEXT("Cannot set backend service - interface CounterCounter is not fully implemented"));
		return;
	}

	BackendService = InService;
}
void CounterCounterOLinkSource::OnValueChanged(const FCustomTypesVector3D& Vector, const FVector& ExternVector, const TArray<FCustomTypesVector3D>& VectorArray, const TArray<FVector>& ExternVectorArray)
{
	static const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "valueChanged");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(signalId);
	const nlohmann::json& args = {Vector, ExternVector, VectorArray, ExternVectorArray};
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifySignal(signalId, args);
		}
	}
}

void CounterCounterOLinkSource::OnVectorChanged(const FCustomTypesVector3D& InVector)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "vector");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InVector);
		}
	}
}

void CounterCounterOLinkSource::OnExternVectorChanged(const FVector& InExternVector)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "extern_vector");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InExternVector);
		}
	}
}

void CounterCounterOLinkSource::OnVectorArrayChanged(const TArray<FCustomTypesVector3D>& InVectorArray)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "vectorArray");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InVectorArray);
		}
	}
}

void CounterCounterOLinkSource::OnExternVectorArrayChanged(const TArray<FVector>& InExternVectorArray)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "extern_vectorArray");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InExternVectorArray);
		}
	}
}

void CounterCounterOLinkSource::setOLinkHost(TSoftObjectPtr<UOLinkHost> InHost)
{
	Host = InHost.Get();
}

//
// IObjectSource interface
//

std::string CounterCounterOLinkSource::olinkObjectName()
{
	return CounterCounterIdentifier;
}

nlohmann::json CounterCounterOLinkSource::olinkInvoke(const std::string& methodId, const nlohmann::json& args)
{
	if (!BackendService)
	{
		UE_LOG(LogCounterCounterOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter CounterCounterOLinkAdapter which implements the CounterCounter interface"));
		return nlohmann::json();
	}

	const std::string path = Name::getMemberName(methodId);
	if (path == "increment")
	{
		FVector Vec = args.at(0).get<FVector>();
		FVector result = BackendService->Increment(Vec);
		return result;
	}
	if (path == "incrementArray")
	{
		TArray<FVector> Vec = args.at(0).get<TArray<FVector>>();
		TArray<FVector> result = BackendService->IncrementArray(Vec);
		return result;
	}
	if (path == "decrement")
	{
		FCustomTypesVector3D Vec = args.at(0).get<FCustomTypesVector3D>();
		FCustomTypesVector3D result = BackendService->Decrement(Vec);
		return result;
	}
	if (path == "decrementArray")
	{
		TArray<FCustomTypesVector3D> Vec = args.at(0).get<TArray<FCustomTypesVector3D>>();
		TArray<FCustomTypesVector3D> result = BackendService->DecrementArray(Vec);
		return result;
	}
	return nlohmann::json();
}

void CounterCounterOLinkSource::olinkSetProperty(const std::string& propertyId, const nlohmann::json& value)
{
	if (!BackendService)
	{
		UE_LOG(LogCounterCounterOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter CounterCounterOLinkAdapter which implements the CounterCounter interface"));
		return;
	}

	const std::string path = Name::getMemberName(propertyId);
	if (path == "vector")
	{
		FCustomTypesVector3D Vector = value.get<FCustomTypesVector3D>();
		BackendService->SetVector(Vector);
	}
	if (path == "extern_vector")
	{
		FVector ExternVector = value.get<FVector>();
		BackendService->SetExternVector(ExternVector);
	}
	if (path == "vectorArray")
	{
		TArray<FCustomTypesVector3D> VectorArray = value.get<TArray<FCustomTypesVector3D>>();
		BackendService->SetVectorArray(VectorArray);
	}
	if (path == "extern_vectorArray")
	{
		TArray<FVector> ExternVectorArray = value.get<TArray<FVector>>();
		BackendService->SetExternVectorArray(ExternVectorArray);
	}
}

nlohmann::json CounterCounterOLinkSource::olinkCollectProperties()
{
	if (!BackendService)
	{
		UE_LOG(LogCounterCounterOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter CounterCounterOLinkAdapter which implements the CounterCounter interface"));
		return nlohmann::json();
	}

	return nlohmann::json::object({

		{"vector", BackendService->GetVector()},
		{"extern_vector", BackendService->GetExternVector()},
		{"vectorArray", BackendService->GetVectorArray()},
		{"extern_vectorArray", BackendService->GetExternVectorArray()}});
}
#endif // !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)
