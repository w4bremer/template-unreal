/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Counter/Generated/MsgBus/CounterCounterMsgBusAdapter.h"
#include "Counter/Generated/MsgBus/CounterCounterMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/World.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
#include "CounterSettings.h"

DEFINE_LOG_CATEGORY(LogCounterCounterMsgBusAdapter);
UCounterCounterMsgBusAdapter::UCounterCounterMsgBusAdapter()
{
}

void UCounterCounterMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UCounterCounterMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UCounterCounterMsgBusAdapter::_StartListening()
{

	if (!_HeartbeatTickerHandle.IsValid())
	{
		UCounterSettings* settings = GetMutableDefault<UCounterSettings>();
		check(settings);
		_HeartbeatIntervalMS = settings->MsgBusHeartbeatIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UCounterCounterMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#else
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UCounterCounterMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}

	if (CounterCounterMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	CounterCounterMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/Counter/Counter/Service")
		.Handling<FCounterCounterDiscoveryMessage>(this, &UCounterCounterMsgBusAdapter::OnDiscoveryMessage)
		.Handling<FCounterCounterServiceAnnouncementReplyMessage>(this, &UCounterCounterMsgBusAdapter::OnServiceAnnouncementMessage)
		.Handling<FCounterCounterPingMessage>(this, &UCounterCounterMsgBusAdapter::OnPing)
		.Handling<FCounterCounterClientDisconnectMessage>(this, &UCounterCounterMsgBusAdapter::OnClientDisconnected)
		.Handling<FCounterCounterSetVectorRequestMessage>(this, &UCounterCounterMsgBusAdapter::OnSetVectorRequest)
		.Handling<FCounterCounterSetExternVectorRequestMessage>(this, &UCounterCounterMsgBusAdapter::OnSetExternVectorRequest)
		.Handling<FCounterCounterSetVectorArrayRequestMessage>(this, &UCounterCounterMsgBusAdapter::OnSetVectorArrayRequest)
		.Handling<FCounterCounterSetExternVectorArrayRequestMessage>(this, &UCounterCounterMsgBusAdapter::OnSetExternVectorArrayRequest)
		.Handling<FCounterCounterIncrementRequestMessage>(this, &UCounterCounterMsgBusAdapter::OnIncrementRequest)
		.Handling<FCounterCounterIncrementArrayRequestMessage>(this, &UCounterCounterMsgBusAdapter::OnIncrementArrayRequest)
		.Handling<FCounterCounterDecrementRequestMessage>(this, &UCounterCounterMsgBusAdapter::OnDecrementRequest)
		.Handling<FCounterCounterDecrementArrayRequestMessage>(this, &UCounterCounterMsgBusAdapter::OnDecrementArrayRequest)
		.Build();
	// clang-format on

	if (CounterCounterMsgBusEndpoint.IsValid())
	{
		CounterCounterMsgBusEndpoint->Subscribe<FCounterCounterDiscoveryMessage>();
		CounterCounterMsgBusEndpoint->Subscribe<FCounterCounterServiceAnnouncementReplyMessage>();
	}

	_AnnounceService();
}

void UCounterCounterMsgBusAdapter::_AnnounceService()
{
	if (!CounterCounterMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FCounterCounterDiscoveryMessage();
	msg->Type = ECounterCounterDiscoveryMessageType::ServiceAnnouncement;
	CounterCounterMsgBusEndpoint->Publish<FCounterCounterDiscoveryMessage>(msg);
}

void UCounterCounterMsgBusAdapter::_StopListening()
{
	if (_HeartbeatTickerHandle.IsValid())
	{
#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#endif
	}

	auto msg = new FCounterCounterServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if (CounterCounterMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		CounterCounterMsgBusEndpoint->Send<FCounterCounterServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	CounterCounterMsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool UCounterCounterMsgBusAdapter::_IsListening() const
{
	return CounterCounterMsgBusEndpoint.IsValid();
}

void UCounterCounterMsgBusAdapter::_setBackendService(TScriptInterface<ICounterCounter> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UCounterCounterSignals* BackendSignals = BackendService->_GetSignals();
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service CounterCounter"));
		if (OnVectorChangedHandle.IsValid())
		{
			BackendSignals->OnVectorChanged.Remove(OnVectorChangedHandle);
			OnVectorChangedHandle.Reset();
		}
		if (OnExternVectorChangedHandle.IsValid())
		{
			BackendSignals->OnExternVectorChanged.Remove(OnExternVectorChangedHandle);
			OnExternVectorChangedHandle.Reset();
		}
		if (OnVectorArrayChangedHandle.IsValid())
		{
			BackendSignals->OnVectorArrayChanged.Remove(OnVectorArrayChangedHandle);
			OnVectorArrayChangedHandle.Reset();
		}
		if (OnExternVectorArrayChangedHandle.IsValid())
		{
			BackendSignals->OnExternVectorArrayChanged.Remove(OnExternVectorArrayChangedHandle);
			OnExternVectorArrayChangedHandle.Reset();
		}
		if (OnValueChangedSignalHandle.IsValid())
		{
			BackendSignals->OnValueChangedSignal.Remove(OnValueChangedSignalHandle);
			OnValueChangedSignalHandle.Reset();
		}
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface CounterCounter is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UCounterCounterSignals* BackendSignals = BackendService->_GetSignals();
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service CounterCounter"));
	// connect property changed signals or simple events
	OnVectorChangedHandle = BackendSignals->OnVectorChanged.AddUObject(this, &UCounterCounterMsgBusAdapter::OnVectorChanged);
	OnExternVectorChangedHandle = BackendSignals->OnExternVectorChanged.AddUObject(this, &UCounterCounterMsgBusAdapter::OnExternVectorChanged);
	OnVectorArrayChangedHandle = BackendSignals->OnVectorArrayChanged.AddUObject(this, &UCounterCounterMsgBusAdapter::OnVectorArrayChanged);
	OnExternVectorArrayChangedHandle = BackendSignals->OnExternVectorArrayChanged.AddUObject(this, &UCounterCounterMsgBusAdapter::OnExternVectorArrayChanged);
	OnValueChangedSignalHandle = BackendSignals->OnValueChangedSignal.AddUObject(this, &UCounterCounterMsgBusAdapter::OnValueChanged);
}

void UCounterCounterMsgBusAdapter::OnDiscoveryMessage(const FCounterCounterDiscoveryMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	switch (InMessage.Type)
	{
	case ECounterCounterDiscoveryMessageType::ServiceAnnouncement:
		HandleServiceAnnouncement(Context);
		break;
	case ECounterCounterDiscoveryMessageType::ConnectionRequest:
	default:
		HandleClientConnectionRequest(Context);
		break;
	}
}

void UCounterCounterMsgBusAdapter::HandleClientConnectionRequest(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new FCounterCounterInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;
	msg->Vector = BackendService->GetVector();
	msg->ExternVector = BackendService->GetExternVector();
	msg->VectorArray = BackendService->GetVectorArray();
	msg->ExternVectorArray = BackendService->GetExternVectorArray();

	if (CounterCounterMsgBusEndpoint.IsValid())
	{
		CounterCounterMsgBusEndpoint->Send<FCounterCounterInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void UCounterCounterMsgBusAdapter::HandleServiceAnnouncement(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	// send service announcement
	auto msg = new FCounterCounterServiceAnnouncementReplyMessage();

	if (CounterCounterMsgBusEndpoint.IsValid())
	{
		CounterCounterMsgBusEndpoint->Send<FCounterCounterServiceAnnouncementReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UCounterCounterMsgBusAdapter::OnServiceAnnouncementMessage(const FCounterCounterServiceAnnouncementReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (CounterCounterMsgBusEndpoint->GetAddress() == Context->GetSender())
	{
		return;
	}
	UE_LOG(LogCounterCounterMsgBusAdapter, Error, TEXT("Service announcement from existing endpoint(%s) received, we should stop listening."), *Context->GetSender().ToString());
}

void UCounterCounterMsgBusAdapter::OnPing(const FCounterCounterPingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FCounterCounterPongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if (CounterCounterMsgBusEndpoint.IsValid())
	{
		CounterCounterMsgBusEndpoint->Send<FCounterCounterPongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UCounterCounterMsgBusAdapter::OnClientDisconnected(const FCounterCounterClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

bool UCounterCounterMsgBusAdapter::_CheckClientTimeoutsTick(float /*DeltaTime*/)
{
	_CheckClientTimeouts();
	return true;
}

void UCounterCounterMsgBusAdapter::_CheckClientTimeouts()
{
	const double CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double DeltaMS = (CurrentTime - ClientPair.Value) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void UCounterCounterMsgBusAdapter::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}

void UCounterCounterMsgBusAdapter::OnIncrementRequest(const FCounterCounterIncrementRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FCounterCounterIncrementReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Increment(InMessage.Vec);

	if (CounterCounterMsgBusEndpoint.IsValid())
	{
		CounterCounterMsgBusEndpoint->Send<FCounterCounterIncrementReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UCounterCounterMsgBusAdapter::OnIncrementArrayRequest(const FCounterCounterIncrementArrayRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FCounterCounterIncrementArrayReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->IncrementArray(InMessage.Vec);

	if (CounterCounterMsgBusEndpoint.IsValid())
	{
		CounterCounterMsgBusEndpoint->Send<FCounterCounterIncrementArrayReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UCounterCounterMsgBusAdapter::OnDecrementRequest(const FCounterCounterDecrementRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FCounterCounterDecrementReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Decrement(InMessage.Vec);

	if (CounterCounterMsgBusEndpoint.IsValid())
	{
		CounterCounterMsgBusEndpoint->Send<FCounterCounterDecrementReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UCounterCounterMsgBusAdapter::OnDecrementArrayRequest(const FCounterCounterDecrementArrayRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FCounterCounterDecrementArrayReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->DecrementArray(InMessage.Vec);

	if (CounterCounterMsgBusEndpoint.IsValid())
	{
		CounterCounterMsgBusEndpoint->Send<FCounterCounterDecrementArrayReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UCounterCounterMsgBusAdapter::OnValueChanged(const FCustomTypesVector3D& InVector, const FVector& InExternVector, const TArray<FCustomTypesVector3D>& InVectorArray, const TArray<FVector>& InExternVectorArray)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FCounterCounterValueChangedSignalMessage();
	msg->Vector = InVector;
	msg->ExternVector = InExternVector;
	msg->VectorArray = InVectorArray;
	msg->ExternVectorArray = InExternVectorArray;
	if (CounterCounterMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		CounterCounterMsgBusEndpoint->Send<FCounterCounterValueChangedSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UCounterCounterMsgBusAdapter::OnSetVectorRequest(const FCounterCounterSetVectorRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetVector(InMessage.Vector);
}

void UCounterCounterMsgBusAdapter::OnVectorChanged(const FCustomTypesVector3D& InVector)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FCounterCounterVectorChangedMessage();
	msg->Vector = InVector;

	if (CounterCounterMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		CounterCounterMsgBusEndpoint->Send<FCounterCounterVectorChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UCounterCounterMsgBusAdapter::OnSetExternVectorRequest(const FCounterCounterSetExternVectorRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetExternVector(InMessage.ExternVector);
}

void UCounterCounterMsgBusAdapter::OnExternVectorChanged(const FVector& InExternVector)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FCounterCounterExternVectorChangedMessage();
	msg->ExternVector = InExternVector;

	if (CounterCounterMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		CounterCounterMsgBusEndpoint->Send<FCounterCounterExternVectorChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UCounterCounterMsgBusAdapter::OnSetVectorArrayRequest(const FCounterCounterSetVectorArrayRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetVectorArray(InMessage.VectorArray);
}

void UCounterCounterMsgBusAdapter::OnVectorArrayChanged(const TArray<FCustomTypesVector3D>& InVectorArray)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FCounterCounterVectorArrayChangedMessage();
	msg->VectorArray = InVectorArray;

	if (CounterCounterMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		CounterCounterMsgBusEndpoint->Send<FCounterCounterVectorArrayChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UCounterCounterMsgBusAdapter::OnSetExternVectorArrayRequest(const FCounterCounterSetExternVectorArrayRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetExternVectorArray(InMessage.ExternVectorArray);
}

void UCounterCounterMsgBusAdapter::OnExternVectorArrayChanged(const TArray<FVector>& InExternVectorArray)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FCounterCounterExternVectorArrayChangedMessage();
	msg->ExternVectorArray = InExternVectorArray;

	if (CounterCounterMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		CounterCounterMsgBusEndpoint->Send<FCounterCounterExternVectorArrayChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
