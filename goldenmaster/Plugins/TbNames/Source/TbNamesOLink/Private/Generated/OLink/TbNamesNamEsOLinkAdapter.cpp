/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbNames/Generated/OLink/TbNamesNamEsOLinkAdapter.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "TbNames/Generated/api/TbNames.json.adapter.h"
#include "OLinkClientConnection.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
THIRD_PARTY_INCLUDES_START
#include "olink/iobjectsource.h"
THIRD_PARTY_INCLUDES_END
#include "TbNamesNamEsOLinkSource.h"
#include "OLinkCommon.h"
#include "HAL/Platform.h"
#if !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)

using namespace ApiGear::ObjectLink;
UTbNamesNamEsOLinkAdapter::UTbNamesNamEsOLinkAdapter()
	: Source(std::make_shared<TbNamesNamEsOLinkSource>())
{
}

void UTbNamesNamEsOLinkAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbNamesNamEsOLinkAdapter::Deinitialize()
{
	Super::Deinitialize();
}

void UTbNamesNamEsOLinkAdapter::setBackendService(TScriptInterface<ITbNamesNamEs> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTbNamesNamEsSignals* BackendSignals = BackendService->_GetSignals();
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service TbNamesNamEs"));
		if (OnSwitchChangedHandle.IsValid())
		{
			BackendSignals->OnSwitchChanged.Remove(OnSwitchChangedHandle);
			OnSwitchChangedHandle.Reset();
		}
		if (OnSomePropertyChangedHandle.IsValid())
		{
			BackendSignals->OnSomePropertyChanged.Remove(OnSomePropertyChangedHandle);
			OnSomePropertyChangedHandle.Reset();
		}
		if (OnSomePoperty2ChangedHandle.IsValid())
		{
			BackendSignals->OnSomePoperty2Changed.Remove(OnSomePoperty2ChangedHandle);
			OnSomePoperty2ChangedHandle.Reset();
		}
		if (OnEnumPropertyChangedHandle.IsValid())
		{
			BackendSignals->OnEnumPropertyChanged.Remove(OnEnumPropertyChangedHandle);
			OnEnumPropertyChangedHandle.Reset();
		}
		if (OnSomeSignalSignalHandle.IsValid())
		{
			BackendSignals->OnSomeSignalSignal.Remove(OnSomeSignalSignalHandle);
			OnSomeSignalSignalHandle.Reset();
		}
		if (OnSomeSignal2SignalHandle.IsValid())
		{
			BackendSignals->OnSomeSignal2Signal.Remove(OnSomeSignal2SignalHandle);
			OnSomeSignal2SignalHandle.Reset();
		}
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbNamesNamEs is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTbNamesNamEsSignals* BackendSignals = BackendService->_GetSignals();
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service TbNamesNamEs"));
	// connect property changed signals or simple events
	OnSwitchChangedHandle = BackendSignals->OnSwitchChanged.AddUObject(this, &UTbNamesNamEsOLinkAdapter::OnSwitchChanged);
	OnSomePropertyChangedHandle = BackendSignals->OnSomePropertyChanged.AddUObject(this, &UTbNamesNamEsOLinkAdapter::OnSomePropertyChanged);
	OnSomePoperty2ChangedHandle = BackendSignals->OnSomePoperty2Changed.AddUObject(this, &UTbNamesNamEsOLinkAdapter::OnSomePoperty2Changed);
	OnEnumPropertyChangedHandle = BackendSignals->OnEnumPropertyChanged.AddUObject(this, &UTbNamesNamEsOLinkAdapter::OnEnumPropertyChanged);
	OnSomeSignalSignalHandle = BackendSignals->OnSomeSignalSignal.AddUObject(this, &UTbNamesNamEsOLinkAdapter::OnSomeSignal);
	OnSomeSignal2SignalHandle = BackendSignals->OnSomeSignal2Signal.AddUObject(this, &UTbNamesNamEsOLinkAdapter::OnSomeSignal2);

	// update olink source with new backend
	Source->setBackendService(InService);
}

void UTbNamesNamEsOLinkAdapter::OnSomeSignal(bool bSomeParam)
{
	Source->OnSomeSignal(bSomeParam);
}

void UTbNamesNamEsOLinkAdapter::OnSomeSignal2(bool bSomeParam)
{
	Source->OnSomeSignal2(bSomeParam);
}

void UTbNamesNamEsOLinkAdapter::OnSwitchChanged(bool bInSwitch)
{
	Source->OnSwitchChanged(bInSwitch);
}

void UTbNamesNamEsOLinkAdapter::OnSomePropertyChanged(int32 InSomeProperty)
{
	Source->OnSomePropertyChanged(InSomeProperty);
}

void UTbNamesNamEsOLinkAdapter::OnSomePoperty2Changed(int32 InSomePoperty2)
{
	Source->OnSomePoperty2Changed(InSomePoperty2);
}

void UTbNamesNamEsOLinkAdapter::OnEnumPropertyChanged(ETbNamesEnum_With_Under_scores InEnumProperty)
{
	Source->OnEnumPropertyChanged(InEnumProperty);
}

void UTbNamesNamEsOLinkAdapter::setOLinkHost(TSoftObjectPtr<UOLinkHost> InHost)
{
	check(InHost);
	Source->setOLinkHost(InHost.Get());

	if (Registry)
	{
		Registry->removeSource(Source->olinkObjectName());
	}
	Registry = InHost->GetOLinkRegistry();
	// register source to host registry
	Registry->addSource(Source);
}
#else  // !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)

UTbNamesNamEsOLinkAdapter::UTbNamesNamEsOLinkAdapter()
	: Source(std::make_shared<TbNamesNamEsOLinkSource>())
{
}

void UTbNamesNamEsOLinkAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbNamesNamEsOLinkAdapter::Deinitialize()
{
	Super::Deinitialize();
}

void UTbNamesNamEsOLinkAdapter::setBackendService(TScriptInterface<ITbNamesNamEs> InService)
{
}

void UTbNamesNamEsOLinkAdapter::OnSomeSignal(bool bSomeParam)
{
}

void UTbNamesNamEsOLinkAdapter::OnSomeSignal2(bool bSomeParam)
{
}

void UTbNamesNamEsOLinkAdapter::OnSwitchChanged(bool bInSwitch)
{
}

void UTbNamesNamEsOLinkAdapter::OnSomePropertyChanged(int32 InSomeProperty)
{
}

void UTbNamesNamEsOLinkAdapter::OnSomePoperty2Changed(int32 InSomePoperty2)
{
}

void UTbNamesNamEsOLinkAdapter::OnEnumPropertyChanged(ETbNamesEnum_With_Under_scores InEnumProperty)
{
}

void UTbNamesNamEsOLinkAdapter::setOLinkHost(TSoftObjectPtr<UOLinkHost> InHost)
{
}
#endif // !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)
