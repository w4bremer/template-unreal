/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbNamesNamEsOLinkSource.h"
#include "HAL/Platform.h"
#include "OLinkCommon.h"
#if !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)
#include "Async/Future.h"
#include "Async/Async.h"
#include "TbNames/Generated/api/TbNames.json.adapter.h"
#include "OLinkClientConnection.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
THIRD_PARTY_INCLUDES_START
#include "olink/iobjectsource.h"
THIRD_PARTY_INCLUDES_END

using namespace ApiGear::ObjectLink;

namespace
{
static const std::string TbNamesNamEsIdentifier{"tb.names.Nam_Es"};
}

DEFINE_LOG_CATEGORY(LogTbNamesNamEsOLinkSource);
TbNamesNamEsOLinkSource::TbNamesNamEsOLinkSource()
	: Host(nullptr)
{
}

void TbNamesNamEsOLinkSource::setBackendService(TScriptInterface<ITbNamesNamEs> InService)
{
	// only set if interface is implemented
	if (InService.GetInterface() == nullptr)
	{
		UE_LOG(LogTbNamesNamEsOLinkSource, Error, TEXT("Cannot set backend service - interface TbNamesNamEs is not fully implemented"));
		return;
	}

	BackendService = InService;
}
void TbNamesNamEsOLinkSource::OnSomeSignal(bool bSomeParam)
{
	static const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "SOME_SIGNAL");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(signalId);
	const nlohmann::json& args = {bSomeParam};
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifySignal(signalId, args);
		}
	}
}

void TbNamesNamEsOLinkSource::OnSomeSignal2(bool bSomeParam)
{
	static const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "Some_Signal2");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(signalId);
	const nlohmann::json& args = {bSomeParam};
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifySignal(signalId, args);
		}
	}
}

void TbNamesNamEsOLinkSource::OnSwitchChanged(bool bInSwitch)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "Switch");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, bInSwitch);
		}
	}
}

void TbNamesNamEsOLinkSource::OnSomePropertyChanged(int32 InSomeProperty)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "SOME_PROPERTY");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InSomeProperty);
		}
	}
}

void TbNamesNamEsOLinkSource::OnSomePoperty2Changed(int32 InSomePoperty2)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "Some_Poperty2");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InSomePoperty2);
		}
	}
}

void TbNamesNamEsOLinkSource::OnEnumPropertyChanged(ETbNamesEnum_With_Under_scores InEnumProperty)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "enum_property");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InEnumProperty);
		}
	}
}

void TbNamesNamEsOLinkSource::setOLinkHost(TSoftObjectPtr<UOLinkHost> InHost)
{
	Host = InHost.Get();
}

//
// IObjectSource interface
//

std::string TbNamesNamEsOLinkSource::olinkObjectName()
{
	return TbNamesNamEsIdentifier;
}

nlohmann::json TbNamesNamEsOLinkSource::olinkInvoke(const std::string& methodId, const nlohmann::json& args)
{
	if (!BackendService)
	{
		UE_LOG(LogTbNamesNamEsOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter TbNamesNamEsOLinkAdapter which implements the TbNamesNamEs interface"));
		return nlohmann::json();
	}

	const std::string path = Name::getMemberName(methodId);
	if (path == "SOME_FUNCTION")
	{
		bool bSomeParam = args.at(0).get<bool>();
		BackendService->SomeFunction(bSomeParam);
		return nlohmann::json{};
	}
	if (path == "Some_Function2")
	{
		bool bSomeParam = args.at(0).get<bool>();
		BackendService->SomeFunction2(bSomeParam);
		return nlohmann::json{};
	}
	return nlohmann::json();
}

void TbNamesNamEsOLinkSource::olinkSetProperty(const std::string& propertyId, const nlohmann::json& value)
{
	if (!BackendService)
	{
		UE_LOG(LogTbNamesNamEsOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter TbNamesNamEsOLinkAdapter which implements the TbNamesNamEs interface"));
		return;
	}

	const std::string path = Name::getMemberName(propertyId);
	if (path == "Switch")
	{
		bool bSwitch = value.get<bool>();
		BackendService->SetSwitch(bSwitch);
	}
	if (path == "SOME_PROPERTY")
	{
		int32 SomeProperty = value.get<int32>();
		BackendService->SetSomeProperty(SomeProperty);
	}
	if (path == "Some_Poperty2")
	{
		int32 SomePoperty2 = value.get<int32>();
		BackendService->SetSomePoperty2(SomePoperty2);
	}
	if (path == "enum_property")
	{
		ETbNamesEnum_With_Under_scores EnumProperty = value.get<ETbNamesEnum_With_Under_scores>();
		BackendService->SetEnumProperty(EnumProperty);
	}
}

nlohmann::json TbNamesNamEsOLinkSource::olinkCollectProperties()
{
	if (!BackendService)
	{
		UE_LOG(LogTbNamesNamEsOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter TbNamesNamEsOLinkAdapter which implements the TbNamesNamEs interface"));
		return nlohmann::json();
	}

	return nlohmann::json::object({

		{"Switch", BackendService->GetSwitch()},
		{"SOME_PROPERTY", BackendService->GetSomeProperty()},
		{"Some_Poperty2", BackendService->GetSomePoperty2()},
		{"enum_property", BackendService->GetEnumProperty()}});
}
#endif // !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)
