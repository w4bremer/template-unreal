/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbSimple/Generated/MsgBus/TbSimpleEmptyInterfaceMsgBusAdapter.h"
#include "TbSimple/Generated/MsgBus/TbSimpleEmptyInterfaceMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/World.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
#include "TbSimpleSettings.h"

DEFINE_LOG_CATEGORY(LogTbSimpleEmptyInterfaceMsgBusAdapter);
UTbSimpleEmptyInterfaceMsgBusAdapter::UTbSimpleEmptyInterfaceMsgBusAdapter()
{
}

void UTbSimpleEmptyInterfaceMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbSimpleEmptyInterfaceMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTbSimpleEmptyInterfaceMsgBusAdapter::_StartListening()
{

	if (!_HeartbeatTickerHandle.IsValid())
	{
		UTbSimpleSettings* settings = GetMutableDefault<UTbSimpleSettings>();
		check(settings);
		_HeartbeatIntervalMS = settings->MsgBusHeartbeatIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbSimpleEmptyInterfaceMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#else
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbSimpleEmptyInterfaceMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}

	if (TbSimpleEmptyInterfaceMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	TbSimpleEmptyInterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbSimple/EmptyInterface/Service")
		.Handling<FTbSimpleEmptyInterfaceDiscoveryMessage>(this, &UTbSimpleEmptyInterfaceMsgBusAdapter::OnDiscoveryMessage)
		.Handling<FTbSimpleEmptyInterfaceServiceAnnouncementReplyMessage>(this, &UTbSimpleEmptyInterfaceMsgBusAdapter::OnServiceAnnouncementMessage)
		.Handling<FTbSimpleEmptyInterfacePingMessage>(this, &UTbSimpleEmptyInterfaceMsgBusAdapter::OnPing)
		.Handling<FTbSimpleEmptyInterfaceClientDisconnectMessage>(this, &UTbSimpleEmptyInterfaceMsgBusAdapter::OnClientDisconnected)
		.Build();
	// clang-format on

	if (TbSimpleEmptyInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleEmptyInterfaceMsgBusEndpoint->Subscribe<FTbSimpleEmptyInterfaceDiscoveryMessage>();
		TbSimpleEmptyInterfaceMsgBusEndpoint->Subscribe<FTbSimpleEmptyInterfaceServiceAnnouncementReplyMessage>();
	}

	_AnnounceService();
}

void UTbSimpleEmptyInterfaceMsgBusAdapter::_AnnounceService()
{
	if (!TbSimpleEmptyInterfaceMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FTbSimpleEmptyInterfaceDiscoveryMessage();
	msg->Type = ETbSimpleEmptyInterfaceDiscoveryMessageType::ServiceAnnouncement;
	TbSimpleEmptyInterfaceMsgBusEndpoint->Publish<FTbSimpleEmptyInterfaceDiscoveryMessage>(msg);
}

void UTbSimpleEmptyInterfaceMsgBusAdapter::_StopListening()
{
	if (_HeartbeatTickerHandle.IsValid())
	{
#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#endif
	}

	auto msg = new FTbSimpleEmptyInterfaceServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if (TbSimpleEmptyInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleEmptyInterfaceMsgBusEndpoint->Send<FTbSimpleEmptyInterfaceServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbSimpleEmptyInterfaceMsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool UTbSimpleEmptyInterfaceMsgBusAdapter::_IsListening() const
{
	return TbSimpleEmptyInterfaceMsgBusEndpoint.IsValid();
}

void UTbSimpleEmptyInterfaceMsgBusAdapter::_setBackendService(TScriptInterface<ITbSimpleEmptyInterface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbSimpleEmptyInterface is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	// connect property changed signals or simple events
}

void UTbSimpleEmptyInterfaceMsgBusAdapter::OnDiscoveryMessage(const FTbSimpleEmptyInterfaceDiscoveryMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	switch (InMessage.Type)
	{
	case ETbSimpleEmptyInterfaceDiscoveryMessageType::ServiceAnnouncement:
		HandleServiceAnnouncement(Context);
		break;
	case ETbSimpleEmptyInterfaceDiscoveryMessageType::ConnectionRequest:
	default:
		HandleClientConnectionRequest(Context);
		break;
	}
}

void UTbSimpleEmptyInterfaceMsgBusAdapter::HandleClientConnectionRequest(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new FTbSimpleEmptyInterfaceInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;

	if (TbSimpleEmptyInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleEmptyInterfaceMsgBusEndpoint->Send<FTbSimpleEmptyInterfaceInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void UTbSimpleEmptyInterfaceMsgBusAdapter::HandleServiceAnnouncement(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	// send service announcement
	auto msg = new FTbSimpleEmptyInterfaceServiceAnnouncementReplyMessage();

	if (TbSimpleEmptyInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleEmptyInterfaceMsgBusEndpoint->Send<FTbSimpleEmptyInterfaceServiceAnnouncementReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleEmptyInterfaceMsgBusAdapter::OnServiceAnnouncementMessage(const FTbSimpleEmptyInterfaceServiceAnnouncementReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (TbSimpleEmptyInterfaceMsgBusEndpoint->GetAddress() == Context->GetSender())
	{
		return;
	}
	UE_LOG(LogTbSimpleEmptyInterfaceMsgBusAdapter, Error, TEXT("Service announcement from existing endpoint(%s) received, we should stop listening."), *Context->GetSender().ToString());
}

void UTbSimpleEmptyInterfaceMsgBusAdapter::OnPing(const FTbSimpleEmptyInterfacePingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleEmptyInterfacePongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if (TbSimpleEmptyInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleEmptyInterfaceMsgBusEndpoint->Send<FTbSimpleEmptyInterfacePongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleEmptyInterfaceMsgBusAdapter::OnClientDisconnected(const FTbSimpleEmptyInterfaceClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

bool UTbSimpleEmptyInterfaceMsgBusAdapter::_CheckClientTimeoutsTick(float /*DeltaTime*/)
{
	_CheckClientTimeouts();
	return true;
}

void UTbSimpleEmptyInterfaceMsgBusAdapter::_CheckClientTimeouts()
{
	const double CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double DeltaMS = (CurrentTime - ClientPair.Value) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void UTbSimpleEmptyInterfaceMsgBusAdapter::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}
