/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbSimple/Generated/MsgBus/TbSimpleNoPropertiesInterfaceMsgBusAdapter.h"
#include "TbSimple/Generated/MsgBus/TbSimpleNoPropertiesInterfaceMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/World.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
#include "TbSimpleSettings.h"

DEFINE_LOG_CATEGORY(LogTbSimpleNoPropertiesInterfaceMsgBusAdapter);
UTbSimpleNoPropertiesInterfaceMsgBusAdapter::UTbSimpleNoPropertiesInterfaceMsgBusAdapter()
{
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::_StartListening()
{

	if (!_HeartbeatTickerHandle.IsValid())
	{
		UTbSimpleSettings* settings = GetMutableDefault<UTbSimpleSettings>();
		check(settings);
		_HeartbeatIntervalMS = settings->MsgBusHeartbeatIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbSimpleNoPropertiesInterfaceMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#else
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbSimpleNoPropertiesInterfaceMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}

	if (TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	TbSimpleNoPropertiesInterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbSimple/NoPropertiesInterface/Service")
		.Handling<FTbSimpleNoPropertiesInterfaceDiscoveryMessage>(this, &UTbSimpleNoPropertiesInterfaceMsgBusAdapter::OnDiscoveryMessage)
		.Handling<FTbSimpleNoPropertiesInterfaceServiceAnnouncementReplyMessage>(this, &UTbSimpleNoPropertiesInterfaceMsgBusAdapter::OnServiceAnnouncementMessage)
		.Handling<FTbSimpleNoPropertiesInterfacePingMessage>(this, &UTbSimpleNoPropertiesInterfaceMsgBusAdapter::OnPing)
		.Handling<FTbSimpleNoPropertiesInterfaceClientDisconnectMessage>(this, &UTbSimpleNoPropertiesInterfaceMsgBusAdapter::OnClientDisconnected)
		.Handling<FTbSimpleNoPropertiesInterfaceFuncVoidRequestMessage>(this, &UTbSimpleNoPropertiesInterfaceMsgBusAdapter::OnFuncVoidRequest)
		.Handling<FTbSimpleNoPropertiesInterfaceFuncBoolRequestMessage>(this, &UTbSimpleNoPropertiesInterfaceMsgBusAdapter::OnFuncBoolRequest)
		.Build();
	// clang-format on

	if (TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoPropertiesInterfaceMsgBusEndpoint->Subscribe<FTbSimpleNoPropertiesInterfaceDiscoveryMessage>();
		TbSimpleNoPropertiesInterfaceMsgBusEndpoint->Subscribe<FTbSimpleNoPropertiesInterfaceServiceAnnouncementReplyMessage>();
	}

	_AnnounceService();
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::_AnnounceService()
{
	if (!TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FTbSimpleNoPropertiesInterfaceDiscoveryMessage();
	msg->Type = ETbSimpleNoPropertiesInterfaceDiscoveryMessageType::ServiceAnnouncement;
	TbSimpleNoPropertiesInterfaceMsgBusEndpoint->Publish<FTbSimpleNoPropertiesInterfaceDiscoveryMessage>(msg);
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::_StopListening()
{
	if (_HeartbeatTickerHandle.IsValid())
	{
#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#endif
	}

	auto msg = new FTbSimpleNoPropertiesInterfaceServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if (TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleNoPropertiesInterfaceMsgBusEndpoint->Send<FTbSimpleNoPropertiesInterfaceServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbSimpleNoPropertiesInterfaceMsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool UTbSimpleNoPropertiesInterfaceMsgBusAdapter::_IsListening() const
{
	return TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid();
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::_setBackendService(TScriptInterface<ITbSimpleNoPropertiesInterface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTbSimpleNoPropertiesInterfaceSignals* BackendSignals = BackendService->_GetSignals();
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service TbSimpleNoPropertiesInterface"));
		if (OnSigVoidSignalHandle.IsValid())
		{
			BackendSignals->OnSigVoidSignal.Remove(OnSigVoidSignalHandle);
			OnSigVoidSignalHandle.Reset();
		}
		if (OnSigBoolSignalHandle.IsValid())
		{
			BackendSignals->OnSigBoolSignal.Remove(OnSigBoolSignalHandle);
			OnSigBoolSignalHandle.Reset();
		}
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbSimpleNoPropertiesInterface is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTbSimpleNoPropertiesInterfaceSignals* BackendSignals = BackendService->_GetSignals();
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service TbSimpleNoPropertiesInterface"));
	// connect property changed signals or simple events
	OnSigVoidSignalHandle = BackendSignals->OnSigVoidSignal.AddUObject(this, &UTbSimpleNoPropertiesInterfaceMsgBusAdapter::OnSigVoid);
	OnSigBoolSignalHandle = BackendSignals->OnSigBoolSignal.AddUObject(this, &UTbSimpleNoPropertiesInterfaceMsgBusAdapter::OnSigBool);
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::OnDiscoveryMessage(const FTbSimpleNoPropertiesInterfaceDiscoveryMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	switch (InMessage.Type)
	{
	case ETbSimpleNoPropertiesInterfaceDiscoveryMessageType::ServiceAnnouncement:
		HandleServiceAnnouncement(Context);
		break;
	case ETbSimpleNoPropertiesInterfaceDiscoveryMessageType::ConnectionRequest:
	default:
		HandleClientConnectionRequest(Context);
		break;
	}
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::HandleClientConnectionRequest(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new FTbSimpleNoPropertiesInterfaceInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;

	if (TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoPropertiesInterfaceMsgBusEndpoint->Send<FTbSimpleNoPropertiesInterfaceInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::HandleServiceAnnouncement(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	// send service announcement
	auto msg = new FTbSimpleNoPropertiesInterfaceServiceAnnouncementReplyMessage();

	if (TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoPropertiesInterfaceMsgBusEndpoint->Send<FTbSimpleNoPropertiesInterfaceServiceAnnouncementReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::OnServiceAnnouncementMessage(const FTbSimpleNoPropertiesInterfaceServiceAnnouncementReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (TbSimpleNoPropertiesInterfaceMsgBusEndpoint->GetAddress() == Context->GetSender())
	{
		return;
	}
	UE_LOG(LogTbSimpleNoPropertiesInterfaceMsgBusAdapter, Error, TEXT("Service announcement from existing endpoint(%s) received, we should stop listening."), *Context->GetSender().ToString());
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::OnPing(const FTbSimpleNoPropertiesInterfacePingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleNoPropertiesInterfacePongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if (TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoPropertiesInterfaceMsgBusEndpoint->Send<FTbSimpleNoPropertiesInterfacePongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::OnClientDisconnected(const FTbSimpleNoPropertiesInterfaceClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

bool UTbSimpleNoPropertiesInterfaceMsgBusAdapter::_CheckClientTimeoutsTick(float /*DeltaTime*/)
{
	_CheckClientTimeouts();
	return true;
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::_CheckClientTimeouts()
{
	const double CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double DeltaMS = (CurrentTime - ClientPair.Value) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::OnFuncVoidRequest(const FTbSimpleNoPropertiesInterfaceFuncVoidRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	BackendService->FuncVoid();
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::OnFuncBoolRequest(const FTbSimpleNoPropertiesInterfaceFuncBoolRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleNoPropertiesInterfaceFuncBoolReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->FuncBool(InMessage.bParamBool);

	if (TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoPropertiesInterfaceMsgBusEndpoint->Send<FTbSimpleNoPropertiesInterfaceFuncBoolReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::OnSigVoid()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleNoPropertiesInterfaceSigVoidSignalMessage();
	if (TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleNoPropertiesInterfaceMsgBusEndpoint->Send<FTbSimpleNoPropertiesInterfaceSigVoidSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleNoPropertiesInterfaceMsgBusAdapter::OnSigBool(bool bInParamBool)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleNoPropertiesInterfaceSigBoolSignalMessage();
	msg->bParamBool = bInParamBool;
	if (TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleNoPropertiesInterfaceMsgBusEndpoint->Send<FTbSimpleNoPropertiesInterfaceSigBoolSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
