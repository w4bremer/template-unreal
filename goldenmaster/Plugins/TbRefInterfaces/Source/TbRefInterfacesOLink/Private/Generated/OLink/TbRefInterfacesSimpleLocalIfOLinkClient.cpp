/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbRefInterfaces/Generated/OLink/TbRefInterfacesSimpleLocalIfOLinkClient.h"
#include "ApiGearSettings.h"
#include "ApiGearOLink.h"
#include "Async/Async.h"
#include "TbRefInterfaces/Generated/api/TbRefInterfaces.json.adapter.h"
#include "TbRefInterfacesImport/Generated/api/TbRefInterfacesImport.json.adapter.h"
#include "OLinkClientConnection.h"
#include "OLinkSink.h"
#include "Engine/Engine.h"
#include "ApiGear/Public/ApiGearConnectionsStore.h"
#include "Misc/DateTime.h"
#include "TbRefInterfacesSettings.h"
THIRD_PARTY_INCLUDES_START
#include "olink/clientnode.h"
#include "olink/iobjectsink.h"
THIRD_PARTY_INCLUDES_END
#include <atomic>

/**
   \brief data structure to hold the last sent property values
*/
struct TbRefInterfacesSimpleLocalIfPropertiesData
{
	std::atomic<int32> IntProperty{0};
};
DEFINE_LOG_CATEGORY(LogTbRefInterfacesSimpleLocalIfOLinkClient);

UTbRefInterfacesSimpleLocalIfOLinkClient::UTbRefInterfacesSimpleLocalIfOLinkClient()
	: UAbstractTbRefInterfacesSimpleLocalIf()
	, _SentData(MakePimpl<TbRefInterfacesSimpleLocalIfPropertiesData>())
{
	m_sink = std::make_shared<FOLinkSink>("tb.ref_interfaces.SimpleLocalIf");
}

UTbRefInterfacesSimpleLocalIfOLinkClient::UTbRefInterfacesSimpleLocalIfOLinkClient(FVTableHelper& Helper)
	: Super(Helper)
{
}
UTbRefInterfacesSimpleLocalIfOLinkClient::~UTbRefInterfacesSimpleLocalIfOLinkClient() = default;

void UTbRefInterfacesSimpleLocalIfOLinkClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);

	m_sink->setOnInitCallback([this]()
		{
		_SubscriptionStatusChanged.Broadcast(true);
		_SubscriptionStatusChangedBP.Broadcast(true);
	});
	m_sink->setOnReleaseCallback([this]()
		{
		_SubscriptionStatusChanged.Broadcast(false);
		_SubscriptionStatusChangedBP.Broadcast(false);
	});

	FOLinkSink::FPropertyChangedFunc PropertyChangedFunc = [this](const nlohmann::json& props)
	{
		this->applyState(props);
	};
	m_sink->setOnPropertyChangedCallback(PropertyChangedFunc);

	FOLinkSink::FSignalEmittedFunc SignalEmittedFunc = [this](const std::string& signalName, const nlohmann::json& args)
	{
		this->emitSignal(signalName, args);
	};
	m_sink->setOnSignalEmittedCallback(SignalEmittedFunc);

	check(GEngine);
	UTbRefInterfacesSettings* settings = GetMutableDefault<UTbRefInterfacesSettings>();

	UApiGearConnectionsStore* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionsStore>();

	TScriptInterface<IApiGearConnection> OLinkConnection = AGCM->GetConnection(settings->OLinkConnectionIdentifier);

	if (!OLinkConnection.GetInterface())
	{
		return;
	}
	UseConnection(OLinkConnection);
	OLinkConnection->Connect();
}

void UTbRefInterfacesSimpleLocalIfOLinkClient::Deinitialize()
{
	// tell the sink that we are gone and should not try to be invoked
	m_sink->resetOnPropertyChangedCallback();
	m_sink->resetOnSignalEmittedCallback();
	m_sink->resetOnInitCallback();
	m_sink->resetOnReleaseCallback();

	if (Connection.GetObject())
	{
		UOLinkClientConnection* UnrealOLinkConnection = Cast<UOLinkClientConnection>(Connection.GetObject());
		UnrealOLinkConnection->unlinkObjectSource(m_sink->olinkObjectName());
		UnrealOLinkConnection->node()->registry().removeSink(m_sink->olinkObjectName());
	}

	Super::Deinitialize();
}

void UTbRefInterfacesSimpleLocalIfOLinkClient::UseConnection(TScriptInterface<IApiGearConnection> InConnection)
{
	if (!InConnection.GetInterface())
	{
		UE_LOG(LogTbRefInterfacesSimpleLocalIfOLinkClient, Error, TEXT("The olink connection for the %s client does not implement the connection interface."), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		return;
	}

	// only accept connections of type olink
	checkf(InConnection->GetConnectionProtocolIdentifier() == ApiGearOLinkProtocolIdentifier, TEXT("Cannot use connection - must be of type olink"));

	UOLinkClientConnection* UnrealOLinkConnection = nullptr;
	// remove old connection
	if (Connection.GetObject())
	{
		UnrealOLinkConnection = Cast<UOLinkClientConnection>(Connection.GetObject());
		UnrealOLinkConnection->unlinkObjectSource(m_sink->olinkObjectName());
		UnrealOLinkConnection->node()->registry().removeSink(m_sink->olinkObjectName());
		UnrealOLinkConnection = nullptr;
	}

	// set up new connection
	UnrealOLinkConnection = Cast<UOLinkClientConnection>(InConnection.GetObject());
	UnrealOLinkConnection->node()->registry().addSink(m_sink);
	UnrealOLinkConnection->linkObjectSource(m_sink->olinkObjectName());

	Connection = InConnection;
}

int32 UTbRefInterfacesSimpleLocalIfOLinkClient::GetIntProperty() const
{
	return IntProperty;
}

void UTbRefInterfacesSimpleLocalIfOLinkClient::SetIntProperty(int32 InIntProperty)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTbRefInterfacesSimpleLocalIfOLinkClient, Error, TEXT("%s has no node. Probably no valid connection or service. Are the ApiGear TbRefInterfaces plugin settings correct? Service set up correctly?"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetIntProperty() == InIntProperty)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->IntProperty == InIntProperty)
	{
		return;
	}
	static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "intProperty");
	m_sink->GetNode()->setRemoteProperty(memberId, InIntProperty);
	_SentData->IntProperty = InIntProperty;
}

int32 UTbRefInterfacesSimpleLocalIfOLinkClient::IntMethod(int32 Param)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTbRefInterfacesSimpleLocalIfOLinkClient, Error, TEXT("%s has no node. Probably no valid connection or service. Are the ApiGear TbRefInterfaces plugin settings correct? Service set up correctly?"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));

		return 0;
	}
	TPromise<int32> Promise;
	Async(EAsyncExecution::ThreadPool,
		[Param, &Promise, this]()
		{
		ApiGear::ObjectLink::InvokeReplyFunc GetSimpleLocalIfStateFunc = [&Promise](ApiGear::ObjectLink::InvokeReplyArg arg)
		{
			if (!arg.value.empty())
			{
				Promise.SetValue(arg.value.get<int32>());
			}
			else
			{
				UE_LOG(LogTbRefInterfacesSimpleLocalIfOLinkClient, Error, TEXT("IntMethod: OLink service returned empty value - should have returned type of int32"));
				Promise.SetValue(int32());
			}
		};
		static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "intMethod");
		m_sink->GetNode()->invokeRemote(memberId, {Param}, GetSimpleLocalIfStateFunc);
	});

	return Promise.GetFuture().Get();
}

bool UTbRefInterfacesSimpleLocalIfOLinkClient::_IsSubscribed() const
{
	return m_sink->IsReady();
}

void UTbRefInterfacesSimpleLocalIfOLinkClient::applyState(const nlohmann::json& fields)
{
	const bool bIntPropertyChanged = fields.contains("intProperty") && (IntProperty != fields["intProperty"].get<int32>());
	if (bIntPropertyChanged)
	{
		IntProperty = fields["intProperty"].get<int32>();
		// reset sent data to the current state
		_SentData->IntProperty = IntProperty;
		_GetSignals()->BroadcastIntPropertyChanged(IntProperty);
	}
}

void UTbRefInterfacesSimpleLocalIfOLinkClient::emitSignal(const std::string& signalName, const nlohmann::json& args)
{
	if (signalName == "intSignal")
	{
		int32 outParam = args[0].get<int32>();
		_GetSignals()->BroadcastIntSignalSignal(outParam);
		return;
	}
}
