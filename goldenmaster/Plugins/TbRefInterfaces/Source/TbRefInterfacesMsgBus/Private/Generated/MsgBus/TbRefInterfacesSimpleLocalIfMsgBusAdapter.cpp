/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbRefInterfaces/Generated/MsgBus/TbRefInterfacesSimpleLocalIfMsgBusAdapter.h"
#include "TbRefInterfaces/Generated/MsgBus/TbRefInterfacesSimpleLocalIfMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/World.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
#include "TbRefInterfacesSettings.h"

DEFINE_LOG_CATEGORY(LogTbRefInterfacesSimpleLocalIfMsgBusAdapter);
UTbRefInterfacesSimpleLocalIfMsgBusAdapter::UTbRefInterfacesSimpleLocalIfMsgBusAdapter()
{
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::_StartListening()
{

	if (!_HeartbeatTickerHandle.IsValid())
	{
		UTbRefInterfacesSettings* settings = GetMutableDefault<UTbRefInterfacesSettings>();
		check(settings);
		_HeartbeatIntervalMS = settings->MsgBusHeartbeatIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefInterfacesSimpleLocalIfMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#else
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefInterfacesSimpleLocalIfMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}

	if (TbRefInterfacesSimpleLocalIfMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	TbRefInterfacesSimpleLocalIfMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbRefInterfaces/SimpleLocalIf/Service")
		.Handling<FTbRefInterfacesSimpleLocalIfDiscoveryMessage>(this, &UTbRefInterfacesSimpleLocalIfMsgBusAdapter::OnDiscoveryMessage)
		.Handling<FTbRefInterfacesSimpleLocalIfServiceAnnouncementReplyMessage>(this, &UTbRefInterfacesSimpleLocalIfMsgBusAdapter::OnServiceAnnouncementMessage)
		.Handling<FTbRefInterfacesSimpleLocalIfPingMessage>(this, &UTbRefInterfacesSimpleLocalIfMsgBusAdapter::OnPing)
		.Handling<FTbRefInterfacesSimpleLocalIfClientDisconnectMessage>(this, &UTbRefInterfacesSimpleLocalIfMsgBusAdapter::OnClientDisconnected)
		.Handling<FTbRefInterfacesSimpleLocalIfSetIntPropertyRequestMessage>(this, &UTbRefInterfacesSimpleLocalIfMsgBusAdapter::OnSetIntPropertyRequest)
		.Handling<FTbRefInterfacesSimpleLocalIfIntMethodRequestMessage>(this, &UTbRefInterfacesSimpleLocalIfMsgBusAdapter::OnIntMethodRequest)
		.Build();
	// clang-format on

	if (TbRefInterfacesSimpleLocalIfMsgBusEndpoint.IsValid())
	{
		TbRefInterfacesSimpleLocalIfMsgBusEndpoint->Subscribe<FTbRefInterfacesSimpleLocalIfDiscoveryMessage>();
		TbRefInterfacesSimpleLocalIfMsgBusEndpoint->Subscribe<FTbRefInterfacesSimpleLocalIfServiceAnnouncementReplyMessage>();
	}

	_AnnounceService();
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::_AnnounceService()
{
	if (!TbRefInterfacesSimpleLocalIfMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FTbRefInterfacesSimpleLocalIfDiscoveryMessage();
	msg->Type = ETbRefInterfacesSimpleLocalIfDiscoveryMessageType::ServiceAnnouncement;
	TbRefInterfacesSimpleLocalIfMsgBusEndpoint->Publish<FTbRefInterfacesSimpleLocalIfDiscoveryMessage>(msg);
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::_StopListening()
{
	if (_HeartbeatTickerHandle.IsValid())
	{
#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#endif
	}

	auto msg = new FTbRefInterfacesSimpleLocalIfServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if (TbRefInterfacesSimpleLocalIfMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefInterfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefInterfacesSimpleLocalIfServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbRefInterfacesSimpleLocalIfMsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool UTbRefInterfacesSimpleLocalIfMsgBusAdapter::_IsListening() const
{
	return TbRefInterfacesSimpleLocalIfMsgBusEndpoint.IsValid();
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::_setBackendService(TScriptInterface<ITbRefInterfacesSimpleLocalIf> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTbRefInterfacesSimpleLocalIfSignals* BackendSignals = BackendService->_GetSignals();
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service TbRefInterfacesSimpleLocalIf"));
		if (OnIntPropertyChangedHandle.IsValid())
		{
			BackendSignals->OnIntPropertyChanged.Remove(OnIntPropertyChangedHandle);
			OnIntPropertyChangedHandle.Reset();
		}
		if (OnIntSignalSignalHandle.IsValid())
		{
			BackendSignals->OnIntSignalSignal.Remove(OnIntSignalSignalHandle);
			OnIntSignalSignalHandle.Reset();
		}
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbRefInterfacesSimpleLocalIf is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTbRefInterfacesSimpleLocalIfSignals* BackendSignals = BackendService->_GetSignals();
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service TbRefInterfacesSimpleLocalIf"));
	// connect property changed signals or simple events
	OnIntPropertyChangedHandle = BackendSignals->OnIntPropertyChanged.AddUObject(this, &UTbRefInterfacesSimpleLocalIfMsgBusAdapter::OnIntPropertyChanged);
	OnIntSignalSignalHandle = BackendSignals->OnIntSignalSignal.AddUObject(this, &UTbRefInterfacesSimpleLocalIfMsgBusAdapter::OnIntSignal);
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::OnDiscoveryMessage(const FTbRefInterfacesSimpleLocalIfDiscoveryMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	switch (InMessage.Type)
	{
	case ETbRefInterfacesSimpleLocalIfDiscoveryMessageType::ServiceAnnouncement:
		HandleServiceAnnouncement(Context);
		break;
	case ETbRefInterfacesSimpleLocalIfDiscoveryMessageType::ConnectionRequest:
	default:
		HandleClientConnectionRequest(Context);
		break;
	}
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::HandleClientConnectionRequest(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new FTbRefInterfacesSimpleLocalIfInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;
	msg->IntProperty = BackendService->GetIntProperty();

	if (TbRefInterfacesSimpleLocalIfMsgBusEndpoint.IsValid())
	{
		TbRefInterfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefInterfacesSimpleLocalIfInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::HandleServiceAnnouncement(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	// send service announcement
	auto msg = new FTbRefInterfacesSimpleLocalIfServiceAnnouncementReplyMessage();

	if (TbRefInterfacesSimpleLocalIfMsgBusEndpoint.IsValid())
	{
		TbRefInterfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefInterfacesSimpleLocalIfServiceAnnouncementReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::OnServiceAnnouncementMessage(const FTbRefInterfacesSimpleLocalIfServiceAnnouncementReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (TbRefInterfacesSimpleLocalIfMsgBusEndpoint->GetAddress() == Context->GetSender())
	{
		return;
	}
	UE_LOG(LogTbRefInterfacesSimpleLocalIfMsgBusAdapter, Error, TEXT("Service announcement from existing endpoint(%s) received, we should stop listening."), *Context->GetSender().ToString());
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::OnPing(const FTbRefInterfacesSimpleLocalIfPingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbRefInterfacesSimpleLocalIfPongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if (TbRefInterfacesSimpleLocalIfMsgBusEndpoint.IsValid())
	{
		TbRefInterfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefInterfacesSimpleLocalIfPongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::OnClientDisconnected(const FTbRefInterfacesSimpleLocalIfClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

bool UTbRefInterfacesSimpleLocalIfMsgBusAdapter::_CheckClientTimeoutsTick(float /*DeltaTime*/)
{
	_CheckClientTimeouts();
	return true;
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::_CheckClientTimeouts()
{
	const double CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double DeltaMS = (CurrentTime - ClientPair.Value) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::OnIntMethodRequest(const FTbRefInterfacesSimpleLocalIfIntMethodRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbRefInterfacesSimpleLocalIfIntMethodReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->IntMethod(InMessage.Param);

	if (TbRefInterfacesSimpleLocalIfMsgBusEndpoint.IsValid())
	{
		TbRefInterfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefInterfacesSimpleLocalIfIntMethodReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::OnIntSignal(int32 InParam)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbRefInterfacesSimpleLocalIfIntSignalSignalMessage();
	msg->Param = InParam;
	if (TbRefInterfacesSimpleLocalIfMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefInterfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefInterfacesSimpleLocalIfIntSignalSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::OnSetIntPropertyRequest(const FTbRefInterfacesSimpleLocalIfSetIntPropertyRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetIntProperty(InMessage.IntProperty);
}

void UTbRefInterfacesSimpleLocalIfMsgBusAdapter::OnIntPropertyChanged(int32 InIntProperty)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbRefInterfacesSimpleLocalIfIntPropertyChangedMessage();
	msg->IntProperty = InIntProperty;

	if (TbRefInterfacesSimpleLocalIfMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefInterfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefInterfacesSimpleLocalIfIntPropertyChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
