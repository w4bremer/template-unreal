/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbRefInterfaces/Generated/MsgBus/TbRefInterfacesSimpleLocalIfMsgBusClient.h"
#include "TbRefInterfaces/Generated/MsgBus/TbRefInterfacesSimpleLocalIfMsgBusMessages.h"
#include "Async/Async.h"
#include "Engine/World.h"
#include "Misc/DateTime.h"
#include "GenericPlatform/GenericPlatformMath.h"
#include "GenericPlatform/GenericPlatformTime.h"
#include "MessageEndpointBuilder.h"
#include "MessageEndpoint.h"
#include "TbRefInterfacesSettings.h"
#include <atomic>

/**
   \brief data structure to hold the last sent property values
*/
struct TbRefInterfacesSimpleLocalIfPropertiesMsgBusData
{
	std::atomic<int32> IntProperty{0};
};
DEFINE_LOG_CATEGORY(LogTbRefInterfacesSimpleLocalIfMsgBusClient);

UTbRefInterfacesSimpleLocalIfMsgBusClient::UTbRefInterfacesSimpleLocalIfMsgBusClient()
	: UAbstractTbRefInterfacesSimpleLocalIf()
	, _SentData(MakePimpl<TbRefInterfacesSimpleLocalIfPropertiesMsgBusData>())
{
	PingRTTBuffer.SetNumZeroed(PING_RTT_BUFFER_SIZE);
}

UTbRefInterfacesSimpleLocalIfMsgBusClient::~UTbRefInterfacesSimpleLocalIfMsgBusClient() = default;

void UTbRefInterfacesSimpleLocalIfMsgBusClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbRefInterfacesSimpleLocalIfMsgBusClient::Deinitialize()
{
	_Disconnect();

	Super::Deinitialize();
}

void UTbRefInterfacesSimpleLocalIfMsgBusClient::_Connect()
{
	if (_IsConnected())
	{
		UE_LOG(LogTbRefInterfacesSimpleLocalIfMsgBusClient, Log, TEXT("Already connected, cannot connect again."));
		return;
	}

	if (!_HeartbeatTickerHandle.IsValid())
	{
		UTbRefInterfacesSettings* settings = GetMutableDefault<UTbRefInterfacesSettings>();
		check(settings);
		_HeartbeatIntervalMS = settings->MsgBusHeartbeatIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefInterfacesSimpleLocalIfMsgBusClient::_OnHeartbeatTick), _HeartbeatIntervalMS / 1000.0f);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefInterfacesSimpleLocalIfMsgBusClient::_OnHeartbeatTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}

	if (TbRefInterfacesSimpleLocalIfMsgBusEndpoint.IsValid() && !ServiceAddress.IsValid())
	{
		_DiscoverService();
		return;
	}

	// clang-format off
	TbRefInterfacesSimpleLocalIfMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbRefInterfaces/SimpleLocalIf/Client")
		.Handling<FTbRefInterfacesSimpleLocalIfInitMessage>(this, &UTbRefInterfacesSimpleLocalIfMsgBusClient::OnConnectionInit)
		.Handling<FTbRefInterfacesSimpleLocalIfPongMessage>(this, &UTbRefInterfacesSimpleLocalIfMsgBusClient::OnPong)
		.Handling<FTbRefInterfacesSimpleLocalIfServiceDisconnectMessage>(this, &UTbRefInterfacesSimpleLocalIfMsgBusClient::OnServiceClosedConnection)
		.Handling<FTbRefInterfacesSimpleLocalIfIntSignalSignalMessage>(this, &UTbRefInterfacesSimpleLocalIfMsgBusClient::OnIntSignal)
		.Handling<FTbRefInterfacesSimpleLocalIfIntPropertyChangedMessage>(this, &UTbRefInterfacesSimpleLocalIfMsgBusClient::OnIntPropertyChanged)
		.Handling<FTbRefInterfacesSimpleLocalIfIntMethodReplyMessage>(this, &UTbRefInterfacesSimpleLocalIfMsgBusClient::OnIntMethodReply)
		.Build();
	// clang-format on

	_DiscoverService();
}

void UTbRefInterfacesSimpleLocalIfMsgBusClient::_Disconnect()
{
	_LastHbTimestamp = 0.0f;

#if (ENGINE_MAJOR_VERSION < 5)
	FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#else
	FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#endif

	if (!_IsConnected())
	{
		return;
	}

	auto msg = new FTbRefInterfacesSimpleLocalIfClientDisconnectMessage();

	TbRefInterfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefInterfacesSimpleLocalIfClientDisconnectMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	TbRefInterfacesSimpleLocalIfMsgBusEndpoint.Reset();
	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
	_ConnectionStatusChangedBP.Broadcast(false);
}

void UTbRefInterfacesSimpleLocalIfMsgBusClient::_DiscoverService()
{
	if (!TbRefInterfacesSimpleLocalIfMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FTbRefInterfacesSimpleLocalIfDiscoveryMessage();
	TbRefInterfacesSimpleLocalIfMsgBusEndpoint->Publish<FTbRefInterfacesSimpleLocalIfDiscoveryMessage>(msg);
}

bool UTbRefInterfacesSimpleLocalIfMsgBusClient::_IsConnected() const
{
	return TbRefInterfacesSimpleLocalIfMsgBusEndpoint.IsValid() && ServiceAddress.IsValid();
}

void UTbRefInterfacesSimpleLocalIfMsgBusClient::OnConnectionInit(const FTbRefInterfacesSimpleLocalIfInitMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress.IsValid())
	{
		UE_LOG(LogTbRefInterfacesSimpleLocalIfMsgBusClient, Warning,
			TEXT("Got a second init message. It usually means that there are several instances of the same service on the network.")
				TEXT(" This can cause connection mixups. Please make sure that there is only one instance of the service running on the network."));
		return;
	}

	ServiceAddress = Context->GetSender();
	// reset ping stats for a new connection
	PingRTTBuffer.Empty();
	PingRTTBuffer.SetNumZeroed(PING_RTT_BUFFER_SIZE);
	CurrentPingCounter = 0;
	Stats.CurrentRTT_MS = 0.0f;
	Stats.AverageRTT_MS = 0.0f;
	Stats.MaxRTT_MS = 0.0f;
	Stats.MinRTT_MS = 10000.0f;

	const bool b_ClientPingIntervalMSChanged = InMessage._ClientPingIntervalMS != _HeartbeatIntervalMS;
	if (b_ClientPingIntervalMSChanged)
	{
		_HeartbeatIntervalMS = InMessage._ClientPingIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefInterfacesSimpleLocalIfMsgBusClient::_OnHeartbeatTick), _HeartbeatIntervalMS / 1000.0f);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefInterfacesSimpleLocalIfMsgBusClient::_OnHeartbeatTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}
	const bool bIntPropertyChanged = InMessage.IntProperty != IntProperty;
	if (bIntPropertyChanged)
	{
		IntProperty = InMessage.IntProperty;
		// reset sent data to the current state
		_SentData->IntProperty = IntProperty;
		_GetSignals()->BroadcastIntPropertyChanged(IntProperty);
	}

	_ConnectionStatusChanged.Broadcast(true);
	_ConnectionStatusChangedBP.Broadcast(true);
}

bool UTbRefInterfacesSimpleLocalIfMsgBusClient::_OnHeartbeatTick(float /*DeltaTime*/)
{
	_OnHeartbeat();
	return true;
}

void UTbRefInterfacesSimpleLocalIfMsgBusClient::_OnHeartbeat()
{
	if (_LastHbTimestamp > 0.1)
	{
		const double DeltaMS = (FPlatformTime::Seconds() - _LastHbTimestamp) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			ServiceAddress.Invalidate();
			_LastHbTimestamp = 0.0;
			_ConnectionStatusChanged.Broadcast(false);
		}
	}

	if (!_IsConnected())
	{
		// only log warning message once a second
		if (FPlatformTime::Seconds() - _LastConnectionWarningTimestamp > 1.0)
		{
			UE_LOG(LogTbRefInterfacesSimpleLocalIfMsgBusClient, Warning, TEXT("Heartbeat failed. Client has no connection to service. Reconnecting ..."));
			_LastConnectionWarningTimestamp = FPlatformTime::Seconds();
		}

		_Connect();
		return;
	}

	auto msg = new FTbRefInterfacesSimpleLocalIfPingMessage();
	msg->Timestamp = FPlatformTime::Seconds();

	TbRefInterfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefInterfacesSimpleLocalIfPingMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
}

float UTbRefInterfacesSimpleLocalIfMsgBusClient::_CalculateAverageRTT() const
{
	if (CurrentPingCounter == 0)
	{
		return 0.0f;
	}

	float TotalRTT = 0.0f;

	for (const float& RTT : PingRTTBuffer)
	{
		TotalRTT += RTT;
	}

	return CurrentPingCounter > 0 ? TotalRTT / CurrentPingCounter : 0.0f;
}

void UTbRefInterfacesSimpleLocalIfMsgBusClient::OnPong(const FTbRefInterfacesSimpleLocalIfPongMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	_LastHbTimestamp = InMessage.Timestamp;

	const double Current = FPlatformTime::Seconds();
	const double DeltaMS = (Current - InMessage.Timestamp) * 1000.0f;

	Stats.CurrentRTT_MS = DeltaMS;
	if (CurrentPingCounter < PING_RTT_BUFFER_SIZE)
	{
		CurrentPingCounter++;
	}
	PingRTTBuffer.RemoveAt(0);
	PingRTTBuffer.Add(Stats.CurrentRTT_MS);
	Stats.AverageRTT_MS = _CalculateAverageRTT();
	Stats.MaxRTT_MS = FGenericPlatformMath::Max(Stats.MaxRTT_MS, Stats.CurrentRTT_MS);
	Stats.MinRTT_MS = FGenericPlatformMath::Min(Stats.MinRTT_MS, Stats.CurrentRTT_MS);

	_StatsUpdated.Broadcast(Stats);
}

const FTbRefInterfacesSimpleLocalIfStats& UTbRefInterfacesSimpleLocalIfMsgBusClient::_GetStats() const
{
	return Stats;
}

void UTbRefInterfacesSimpleLocalIfMsgBusClient::OnServiceClosedConnection(const FTbRefInterfacesSimpleLocalIfServiceDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		return;
	}

	_LastHbTimestamp = 0.0;
	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
	_ConnectionStatusChangedBP.Broadcast(false);
}

int32 UTbRefInterfacesSimpleLocalIfMsgBusClient::GetIntProperty() const
{
	return IntProperty;
}

void UTbRefInterfacesSimpleLocalIfMsgBusClient::SetIntProperty(int32 InIntProperty)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbRefInterfacesSimpleLocalIfMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetIntProperty() == InIntProperty)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->IntProperty == InIntProperty)
	{
		return;
	}

	auto msg = new FTbRefInterfacesSimpleLocalIfSetIntPropertyRequestMessage();
	msg->IntProperty = InIntProperty;

	TbRefInterfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefInterfacesSimpleLocalIfSetIntPropertyRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
	_SentData->IntProperty = InIntProperty;
}

int32 UTbRefInterfacesSimpleLocalIfMsgBusClient::IntMethod(int32 InParam)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbRefInterfacesSimpleLocalIfMsgBusClient, Error, TEXT("Client has no connection to service."));

		return 0;
	}

	auto msg = new FTbRefInterfacesSimpleLocalIfIntMethodRequestMessage();
	msg->ResponseId = FGuid::NewGuid();
	msg->Param = InParam;
	TPromise<int32> Promise;
	StorePromise(msg->ResponseId, Promise);

	TbRefInterfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefInterfacesSimpleLocalIfIntMethodRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	return Promise.GetFuture().Get();
}

void UTbRefInterfacesSimpleLocalIfMsgBusClient::OnIntMethodReply(const FTbRefInterfacesSimpleLocalIfIntMethodReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InMessage.ResponseId, InMessage.Result);
}

void UTbRefInterfacesSimpleLocalIfMsgBusClient::OnIntSignal(const FTbRefInterfacesSimpleLocalIfIntSignalSignalMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbRefInterfacesSimpleLocalIfMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	_GetSignals()->BroadcastIntSignalSignal(InMessage.Param);
	return;
}

void UTbRefInterfacesSimpleLocalIfMsgBusClient::OnIntPropertyChanged(const FTbRefInterfacesSimpleLocalIfIntPropertyChangedMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbRefInterfacesSimpleLocalIfMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bIntPropertyChanged = InMessage.IntProperty != IntProperty;
	if (bIntPropertyChanged)
	{
		IntProperty = InMessage.IntProperty;
		// reset sent data to the current state
		_SentData->IntProperty = IntProperty;
		_GetSignals()->BroadcastIntPropertyChanged(IntProperty);
	}
}

template <typename ResultType>
bool UTbRefInterfacesSimpleLocalIfMsgBusClient::StorePromise(const FGuid& Id, TPromise<ResultType>& Promise)
{
	FScopeLock Lock(&ReplyPromisesMapCS);
	return ReplyPromisesMap.Add(Id, &Promise) != nullptr;
}

template <typename ResultType>
bool UTbRefInterfacesSimpleLocalIfMsgBusClient::FulfillPromise(const FGuid& Id, const ResultType& Value)
{
	TPromise<ResultType>* PromisePtr = nullptr;

	{
		FScopeLock Lock(&ReplyPromisesMapCS);
		if (auto** Found = ReplyPromisesMap.Find(Id))
		{
			PromisePtr = static_cast<TPromise<ResultType>*>(*Found);
			ReplyPromisesMap.Remove(Id);
		}
	}

	if (PromisePtr)
	{
		PromisePtr->SetValue(Value);
		return true;
	}
	return false;
}

template bool UTbRefInterfacesSimpleLocalIfMsgBusClient::StorePromise<int32>(const FGuid& Id, TPromise<int32>& Promise);
template bool UTbRefInterfacesSimpleLocalIfMsgBusClient::FulfillPromise<int32>(const FGuid& Id, const int32& Value);
