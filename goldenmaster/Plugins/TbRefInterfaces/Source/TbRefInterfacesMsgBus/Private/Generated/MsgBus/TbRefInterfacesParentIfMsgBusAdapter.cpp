/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbRefInterfaces/Generated/MsgBus/TbRefInterfacesParentIfMsgBusAdapter.h"
#include "TbRefInterfaces/Generated/MsgBus/TbRefInterfacesParentIfMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/World.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
#include "TbRefInterfacesSettings.h"

DEFINE_LOG_CATEGORY(LogTbRefInterfacesParentIfMsgBusAdapter);
UTbRefInterfacesParentIfMsgBusAdapter::UTbRefInterfacesParentIfMsgBusAdapter()
{
}

void UTbRefInterfacesParentIfMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbRefInterfacesParentIfMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTbRefInterfacesParentIfMsgBusAdapter::_StartListening()
{

	if (!_HeartbeatTickerHandle.IsValid())
	{
		UTbRefInterfacesSettings* settings = GetMutableDefault<UTbRefInterfacesSettings>();
		check(settings);
		_HeartbeatIntervalMS = settings->MsgBusHeartbeatIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefInterfacesParentIfMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#else
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefInterfacesParentIfMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}

	if (TbRefInterfacesParentIfMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	TbRefInterfacesParentIfMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbRefInterfaces/ParentIf/Service")
		.Handling<FTbRefInterfacesParentIfDiscoveryMessage>(this, &UTbRefInterfacesParentIfMsgBusAdapter::OnDiscoveryMessage)
		.Handling<FTbRefInterfacesParentIfServiceAnnouncementReplyMessage>(this, &UTbRefInterfacesParentIfMsgBusAdapter::OnServiceAnnouncementMessage)
		.Handling<FTbRefInterfacesParentIfPingMessage>(this, &UTbRefInterfacesParentIfMsgBusAdapter::OnPing)
		.Handling<FTbRefInterfacesParentIfClientDisconnectMessage>(this, &UTbRefInterfacesParentIfMsgBusAdapter::OnClientDisconnected)
		.Handling<FTbRefInterfacesParentIfSetLocalIfRequestMessage>(this, &UTbRefInterfacesParentIfMsgBusAdapter::OnSetLocalIfRequest)
		.Handling<FTbRefInterfacesParentIfSetImportedIfRequestMessage>(this, &UTbRefInterfacesParentIfMsgBusAdapter::OnSetImportedIfRequest)
		.Handling<FTbRefInterfacesParentIfLocalIfMethodRequestMessage>(this, &UTbRefInterfacesParentIfMsgBusAdapter::OnLocalIfMethodRequest)
		.Handling<FTbRefInterfacesParentIfImportedIfMethodRequestMessage>(this, &UTbRefInterfacesParentIfMsgBusAdapter::OnImportedIfMethodRequest)
		.Build();
	// clang-format on

	if (TbRefInterfacesParentIfMsgBusEndpoint.IsValid())
	{
		TbRefInterfacesParentIfMsgBusEndpoint->Subscribe<FTbRefInterfacesParentIfDiscoveryMessage>();
		TbRefInterfacesParentIfMsgBusEndpoint->Subscribe<FTbRefInterfacesParentIfServiceAnnouncementReplyMessage>();
	}

	_AnnounceService();
}

void UTbRefInterfacesParentIfMsgBusAdapter::_AnnounceService()
{
	if (!TbRefInterfacesParentIfMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FTbRefInterfacesParentIfDiscoveryMessage();
	msg->Type = ETbRefInterfacesParentIfDiscoveryMessageType::ServiceAnnouncement;
	TbRefInterfacesParentIfMsgBusEndpoint->Publish<FTbRefInterfacesParentIfDiscoveryMessage>(msg);
}

void UTbRefInterfacesParentIfMsgBusAdapter::_StopListening()
{
	if (_HeartbeatTickerHandle.IsValid())
	{
#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#endif
	}

	auto msg = new FTbRefInterfacesParentIfServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if (TbRefInterfacesParentIfMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefInterfacesParentIfMsgBusEndpoint->Send<FTbRefInterfacesParentIfServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbRefInterfacesParentIfMsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool UTbRefInterfacesParentIfMsgBusAdapter::_IsListening() const
{
	return TbRefInterfacesParentIfMsgBusEndpoint.IsValid();
}

void UTbRefInterfacesParentIfMsgBusAdapter::_setBackendService(TScriptInterface<ITbRefInterfacesParentIf> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTbRefInterfacesParentIfSignals* BackendSignals = BackendService->_GetSignals();
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service TbRefInterfacesParentIf"));
		if (OnLocalIfChangedHandle.IsValid())
		{
			BackendSignals->OnLocalIfChanged.Remove(OnLocalIfChangedHandle);
			OnLocalIfChangedHandle.Reset();
		}
		if (OnImportedIfChangedHandle.IsValid())
		{
			BackendSignals->OnImportedIfChanged.Remove(OnImportedIfChangedHandle);
			OnImportedIfChangedHandle.Reset();
		}
		if (OnLocalIfSignalSignalHandle.IsValid())
		{
			BackendSignals->OnLocalIfSignalSignal.Remove(OnLocalIfSignalSignalHandle);
			OnLocalIfSignalSignalHandle.Reset();
		}
		if (OnImportedIfSignalSignalHandle.IsValid())
		{
			BackendSignals->OnImportedIfSignalSignal.Remove(OnImportedIfSignalSignalHandle);
			OnImportedIfSignalSignalHandle.Reset();
		}
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbRefInterfacesParentIf is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTbRefInterfacesParentIfSignals* BackendSignals = BackendService->_GetSignals();
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service TbRefInterfacesParentIf"));
	// connect property changed signals or simple events
	OnLocalIfChangedHandle = BackendSignals->OnLocalIfChanged.AddUObject(this, &UTbRefInterfacesParentIfMsgBusAdapter::OnLocalIfChanged);
	OnImportedIfChangedHandle = BackendSignals->OnImportedIfChanged.AddUObject(this, &UTbRefInterfacesParentIfMsgBusAdapter::OnImportedIfChanged);
	OnLocalIfSignalSignalHandle = BackendSignals->OnLocalIfSignalSignal.AddUObject(this, &UTbRefInterfacesParentIfMsgBusAdapter::OnLocalIfSignal);
	OnImportedIfSignalSignalHandle = BackendSignals->OnImportedIfSignalSignal.AddUObject(this, &UTbRefInterfacesParentIfMsgBusAdapter::OnImportedIfSignal);
}

void UTbRefInterfacesParentIfMsgBusAdapter::OnDiscoveryMessage(const FTbRefInterfacesParentIfDiscoveryMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	switch (InMessage.Type)
	{
	case ETbRefInterfacesParentIfDiscoveryMessageType::ServiceAnnouncement:
		HandleServiceAnnouncement(Context);
		break;
	case ETbRefInterfacesParentIfDiscoveryMessageType::ConnectionRequest:
	default:
		HandleClientConnectionRequest(Context);
		break;
	}
}

void UTbRefInterfacesParentIfMsgBusAdapter::HandleClientConnectionRequest(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new FTbRefInterfacesParentIfInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;
	msg->LocalIf = BackendService->GetLocalIf();
	msg->ImportedIf = BackendService->GetImportedIf();

	if (TbRefInterfacesParentIfMsgBusEndpoint.IsValid())
	{
		TbRefInterfacesParentIfMsgBusEndpoint->Send<FTbRefInterfacesParentIfInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void UTbRefInterfacesParentIfMsgBusAdapter::HandleServiceAnnouncement(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	// send service announcement
	auto msg = new FTbRefInterfacesParentIfServiceAnnouncementReplyMessage();

	if (TbRefInterfacesParentIfMsgBusEndpoint.IsValid())
	{
		TbRefInterfacesParentIfMsgBusEndpoint->Send<FTbRefInterfacesParentIfServiceAnnouncementReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefInterfacesParentIfMsgBusAdapter::OnServiceAnnouncementMessage(const FTbRefInterfacesParentIfServiceAnnouncementReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (TbRefInterfacesParentIfMsgBusEndpoint->GetAddress() == Context->GetSender())
	{
		return;
	}
	UE_LOG(LogTbRefInterfacesParentIfMsgBusAdapter, Error, TEXT("Service announcement from existing endpoint(%s) received, we should stop listening."), *Context->GetSender().ToString());
}

void UTbRefInterfacesParentIfMsgBusAdapter::OnPing(const FTbRefInterfacesParentIfPingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbRefInterfacesParentIfPongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if (TbRefInterfacesParentIfMsgBusEndpoint.IsValid())
	{
		TbRefInterfacesParentIfMsgBusEndpoint->Send<FTbRefInterfacesParentIfPongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefInterfacesParentIfMsgBusAdapter::OnClientDisconnected(const FTbRefInterfacesParentIfClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

bool UTbRefInterfacesParentIfMsgBusAdapter::_CheckClientTimeoutsTick(float /*DeltaTime*/)
{
	_CheckClientTimeouts();
	return true;
}

void UTbRefInterfacesParentIfMsgBusAdapter::_CheckClientTimeouts()
{
	const double CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double DeltaMS = (CurrentTime - ClientPair.Value) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void UTbRefInterfacesParentIfMsgBusAdapter::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}

void UTbRefInterfacesParentIfMsgBusAdapter::OnLocalIfMethodRequest(const FTbRefInterfacesParentIfLocalIfMethodRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbRefInterfacesParentIfLocalIfMethodReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->LocalIfMethod(InMessage.Param);

	if (TbRefInterfacesParentIfMsgBusEndpoint.IsValid())
	{
		TbRefInterfacesParentIfMsgBusEndpoint->Send<FTbRefInterfacesParentIfLocalIfMethodReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefInterfacesParentIfMsgBusAdapter::OnImportedIfMethodRequest(const FTbRefInterfacesParentIfImportedIfMethodRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbRefInterfacesParentIfImportedIfMethodReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->ImportedIfMethod(InMessage.Param);

	if (TbRefInterfacesParentIfMsgBusEndpoint.IsValid())
	{
		TbRefInterfacesParentIfMsgBusEndpoint->Send<FTbRefInterfacesParentIfImportedIfMethodReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefInterfacesParentIfMsgBusAdapter::OnLocalIfSignal(const TScriptInterface<ITbRefInterfacesSimpleLocalIf>& InParam)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbRefInterfacesParentIfLocalIfSignalSignalMessage();
	msg->Param = InParam;
	if (TbRefInterfacesParentIfMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefInterfacesParentIfMsgBusEndpoint->Send<FTbRefInterfacesParentIfLocalIfSignalSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefInterfacesParentIfMsgBusAdapter::OnImportedIfSignal(const TScriptInterface<ITbRefInterfacesImportCounter>& InParam)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbRefInterfacesParentIfImportedIfSignalSignalMessage();
	msg->Param = InParam;
	if (TbRefInterfacesParentIfMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefInterfacesParentIfMsgBusEndpoint->Send<FTbRefInterfacesParentIfImportedIfSignalSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefInterfacesParentIfMsgBusAdapter::OnSetLocalIfRequest(const FTbRefInterfacesParentIfSetLocalIfRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetLocalIf(InMessage.LocalIf);
}

void UTbRefInterfacesParentIfMsgBusAdapter::OnLocalIfChanged(const TScriptInterface<ITbRefInterfacesSimpleLocalIf>& InLocalIf)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbRefInterfacesParentIfLocalIfChangedMessage();
	msg->LocalIf = InLocalIf;

	if (TbRefInterfacesParentIfMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefInterfacesParentIfMsgBusEndpoint->Send<FTbRefInterfacesParentIfLocalIfChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefInterfacesParentIfMsgBusAdapter::OnSetImportedIfRequest(const FTbRefInterfacesParentIfSetImportedIfRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetImportedIf(InMessage.ImportedIf);
}

void UTbRefInterfacesParentIfMsgBusAdapter::OnImportedIfChanged(const TScriptInterface<ITbRefInterfacesImportCounter>& InImportedIf)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbRefInterfacesParentIfImportedIfChangedMessage();
	msg->ImportedIf = InImportedIf;

	if (TbRefInterfacesParentIfMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefInterfacesParentIfMsgBusEndpoint->Send<FTbRefInterfacesParentIfImportedIfChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
