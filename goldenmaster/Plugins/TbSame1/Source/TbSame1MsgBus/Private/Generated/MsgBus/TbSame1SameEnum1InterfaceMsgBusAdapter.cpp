/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbSame1/Generated/MsgBus/TbSame1SameEnum1InterfaceMsgBusAdapter.h"
#include "TbSame1/Generated/MsgBus/TbSame1SameEnum1InterfaceMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/World.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
#include "TbSame1Settings.h"

DEFINE_LOG_CATEGORY(LogTbSame1SameEnum1InterfaceMsgBusAdapter);
UTbSame1SameEnum1InterfaceMsgBusAdapter::UTbSame1SameEnum1InterfaceMsgBusAdapter()
{
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::_StartListening()
{

	if (!_HeartbeatTickerHandle.IsValid())
	{
		UTbSame1Settings* settings = GetMutableDefault<UTbSame1Settings>();
		check(settings);
		_HeartbeatIntervalMS = settings->MsgBusHeartbeatIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbSame1SameEnum1InterfaceMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#else
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbSame1SameEnum1InterfaceMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}

	if (TbSame1SameEnum1InterfaceMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	TbSame1SameEnum1InterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbSame1/SameEnum1Interface/Service")
		.Handling<FTbSame1SameEnum1InterfaceDiscoveryMessage>(this, &UTbSame1SameEnum1InterfaceMsgBusAdapter::OnDiscoveryMessage)
		.Handling<FTbSame1SameEnum1InterfaceServiceAnnouncementReplyMessage>(this, &UTbSame1SameEnum1InterfaceMsgBusAdapter::OnServiceAnnouncementMessage)
		.Handling<FTbSame1SameEnum1InterfacePingMessage>(this, &UTbSame1SameEnum1InterfaceMsgBusAdapter::OnPing)
		.Handling<FTbSame1SameEnum1InterfaceClientDisconnectMessage>(this, &UTbSame1SameEnum1InterfaceMsgBusAdapter::OnClientDisconnected)
		.Handling<FTbSame1SameEnum1InterfaceSetProp1RequestMessage>(this, &UTbSame1SameEnum1InterfaceMsgBusAdapter::OnSetProp1Request)
		.Handling<FTbSame1SameEnum1InterfaceFunc1RequestMessage>(this, &UTbSame1SameEnum1InterfaceMsgBusAdapter::OnFunc1Request)
		.Build();
	// clang-format on

	if (TbSame1SameEnum1InterfaceMsgBusEndpoint.IsValid())
	{
		TbSame1SameEnum1InterfaceMsgBusEndpoint->Subscribe<FTbSame1SameEnum1InterfaceDiscoveryMessage>();
		TbSame1SameEnum1InterfaceMsgBusEndpoint->Subscribe<FTbSame1SameEnum1InterfaceServiceAnnouncementReplyMessage>();
	}

	_AnnounceService();
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::_AnnounceService()
{
	if (!TbSame1SameEnum1InterfaceMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FTbSame1SameEnum1InterfaceDiscoveryMessage();
	msg->Type = ETbSame1SameEnum1InterfaceDiscoveryMessageType::ServiceAnnouncement;
	TbSame1SameEnum1InterfaceMsgBusEndpoint->Publish<FTbSame1SameEnum1InterfaceDiscoveryMessage>(msg);
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::_StopListening()
{
	if (_HeartbeatTickerHandle.IsValid())
	{
#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#endif
	}

	auto msg = new FTbSame1SameEnum1InterfaceServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if (TbSame1SameEnum1InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSame1SameEnum1InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum1InterfaceServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbSame1SameEnum1InterfaceMsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool UTbSame1SameEnum1InterfaceMsgBusAdapter::_IsListening() const
{
	return TbSame1SameEnum1InterfaceMsgBusEndpoint.IsValid();
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::_setBackendService(TScriptInterface<ITbSame1SameEnum1Interface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTbSame1SameEnum1InterfaceSignals* BackendSignals = BackendService->_GetSignals();
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service TbSame1SameEnum1Interface"));
		if (OnProp1ChangedHandle.IsValid())
		{
			BackendSignals->OnProp1Changed.Remove(OnProp1ChangedHandle);
			OnProp1ChangedHandle.Reset();
		}
		if (OnSig1SignalHandle.IsValid())
		{
			BackendSignals->OnSig1Signal.Remove(OnSig1SignalHandle);
			OnSig1SignalHandle.Reset();
		}
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbSame1SameEnum1Interface is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTbSame1SameEnum1InterfaceSignals* BackendSignals = BackendService->_GetSignals();
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service TbSame1SameEnum1Interface"));
	// connect property changed signals or simple events
	OnProp1ChangedHandle = BackendSignals->OnProp1Changed.AddUObject(this, &UTbSame1SameEnum1InterfaceMsgBusAdapter::OnProp1Changed);
	OnSig1SignalHandle = BackendSignals->OnSig1Signal.AddUObject(this, &UTbSame1SameEnum1InterfaceMsgBusAdapter::OnSig1);
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::OnDiscoveryMessage(const FTbSame1SameEnum1InterfaceDiscoveryMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	switch (InMessage.Type)
	{
	case ETbSame1SameEnum1InterfaceDiscoveryMessageType::ServiceAnnouncement:
		HandleServiceAnnouncement(Context);
		break;
	case ETbSame1SameEnum1InterfaceDiscoveryMessageType::ConnectionRequest:
	default:
		HandleClientConnectionRequest(Context);
		break;
	}
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::HandleClientConnectionRequest(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new FTbSame1SameEnum1InterfaceInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;
	msg->Prop1 = BackendService->GetProp1();

	if (TbSame1SameEnum1InterfaceMsgBusEndpoint.IsValid())
	{
		TbSame1SameEnum1InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum1InterfaceInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::HandleServiceAnnouncement(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	// send service announcement
	auto msg = new FTbSame1SameEnum1InterfaceServiceAnnouncementReplyMessage();

	if (TbSame1SameEnum1InterfaceMsgBusEndpoint.IsValid())
	{
		TbSame1SameEnum1InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum1InterfaceServiceAnnouncementReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::OnServiceAnnouncementMessage(const FTbSame1SameEnum1InterfaceServiceAnnouncementReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (TbSame1SameEnum1InterfaceMsgBusEndpoint->GetAddress() == Context->GetSender())
	{
		return;
	}
	UE_LOG(LogTbSame1SameEnum1InterfaceMsgBusAdapter, Error, TEXT("Service announcement from existing endpoint(%s) received, we should stop listening."), *Context->GetSender().ToString());
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::OnPing(const FTbSame1SameEnum1InterfacePingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSame1SameEnum1InterfacePongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if (TbSame1SameEnum1InterfaceMsgBusEndpoint.IsValid())
	{
		TbSame1SameEnum1InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum1InterfacePongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::OnClientDisconnected(const FTbSame1SameEnum1InterfaceClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

bool UTbSame1SameEnum1InterfaceMsgBusAdapter::_CheckClientTimeoutsTick(float /*DeltaTime*/)
{
	_CheckClientTimeouts();
	return true;
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::_CheckClientTimeouts()
{
	const double CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double DeltaMS = (CurrentTime - ClientPair.Value) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::OnFunc1Request(const FTbSame1SameEnum1InterfaceFunc1RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSame1SameEnum1InterfaceFunc1ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Func1(InMessage.Param1);

	if (TbSame1SameEnum1InterfaceMsgBusEndpoint.IsValid())
	{
		TbSame1SameEnum1InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum1InterfaceFunc1ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::OnSig1(ETbSame1Enum1 InParam1)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSame1SameEnum1InterfaceSig1SignalMessage();
	msg->Param1 = InParam1;
	if (TbSame1SameEnum1InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSame1SameEnum1InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum1InterfaceSig1SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::OnSetProp1Request(const FTbSame1SameEnum1InterfaceSetProp1RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetProp1(InMessage.Prop1);
}

void UTbSame1SameEnum1InterfaceMsgBusAdapter::OnProp1Changed(ETbSame1Enum1 InProp1)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSame1SameEnum1InterfaceProp1ChangedMessage();
	msg->Prop1 = InProp1;

	if (TbSame1SameEnum1InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSame1SameEnum1InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum1InterfaceProp1ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
