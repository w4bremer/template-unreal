/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Testbed2/Generated/MsgBus/Testbed2ManyParamInterfaceMsgBusAdapter.h"
#include "Testbed2/Generated/MsgBus/Testbed2ManyParamInterfaceMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/World.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
#include "Testbed2Settings.h"

DEFINE_LOG_CATEGORY(LogTestbed2ManyParamInterfaceMsgBusAdapter);
UTestbed2ManyParamInterfaceMsgBusAdapter::UTestbed2ManyParamInterfaceMsgBusAdapter()
{
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::_StartListening()
{

	if (!_HeartbeatTickerHandle.IsValid())
	{
		UTestbed2Settings* settings = GetMutableDefault<UTestbed2Settings>();
		check(settings);
		_HeartbeatIntervalMS = settings->MsgBusHeartbeatIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#else
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}

	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	Testbed2ManyParamInterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/Testbed2/ManyParamInterface/Service")
		.Handling<FTestbed2ManyParamInterfaceDiscoveryMessage>(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnDiscoveryMessage)
		.Handling<FTestbed2ManyParamInterfaceServiceAnnouncementReplyMessage>(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnServiceAnnouncementMessage)
		.Handling<FTestbed2ManyParamInterfacePingMessage>(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnPing)
		.Handling<FTestbed2ManyParamInterfaceClientDisconnectMessage>(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnClientDisconnected)
		.Handling<FTestbed2ManyParamInterfaceSetProp1RequestMessage>(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnSetProp1Request)
		.Handling<FTestbed2ManyParamInterfaceSetProp2RequestMessage>(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnSetProp2Request)
		.Handling<FTestbed2ManyParamInterfaceSetProp3RequestMessage>(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnSetProp3Request)
		.Handling<FTestbed2ManyParamInterfaceSetProp4RequestMessage>(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnSetProp4Request)
		.Handling<FTestbed2ManyParamInterfaceFunc1RequestMessage>(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnFunc1Request)
		.Handling<FTestbed2ManyParamInterfaceFunc2RequestMessage>(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnFunc2Request)
		.Handling<FTestbed2ManyParamInterfaceFunc3RequestMessage>(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnFunc3Request)
		.Handling<FTestbed2ManyParamInterfaceFunc4RequestMessage>(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnFunc4Request)
		.Build();
	// clang-format on

	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid())
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Subscribe<FTestbed2ManyParamInterfaceDiscoveryMessage>();
		Testbed2ManyParamInterfaceMsgBusEndpoint->Subscribe<FTestbed2ManyParamInterfaceServiceAnnouncementReplyMessage>();
	}

	_AnnounceService();
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::_AnnounceService()
{
	if (!Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FTestbed2ManyParamInterfaceDiscoveryMessage();
	msg->Type = ETestbed2ManyParamInterfaceDiscoveryMessageType::ServiceAnnouncement;
	Testbed2ManyParamInterfaceMsgBusEndpoint->Publish<FTestbed2ManyParamInterfaceDiscoveryMessage>(msg);
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::_StopListening()
{
	if (_HeartbeatTickerHandle.IsValid())
	{
#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#endif
	}

	auto msg = new FTestbed2ManyParamInterfaceServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Send<FTestbed2ManyParamInterfaceServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	Testbed2ManyParamInterfaceMsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool UTestbed2ManyParamInterfaceMsgBusAdapter::_IsListening() const
{
	return Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid();
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::_setBackendService(TScriptInterface<ITestbed2ManyParamInterface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTestbed2ManyParamInterfaceSignals* BackendSignals = BackendService->_GetSignals();
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service Testbed2ManyParamInterface"));
		if (OnProp1ChangedHandle.IsValid())
		{
			BackendSignals->OnProp1Changed.Remove(OnProp1ChangedHandle);
			OnProp1ChangedHandle.Reset();
		}
		if (OnProp2ChangedHandle.IsValid())
		{
			BackendSignals->OnProp2Changed.Remove(OnProp2ChangedHandle);
			OnProp2ChangedHandle.Reset();
		}
		if (OnProp3ChangedHandle.IsValid())
		{
			BackendSignals->OnProp3Changed.Remove(OnProp3ChangedHandle);
			OnProp3ChangedHandle.Reset();
		}
		if (OnProp4ChangedHandle.IsValid())
		{
			BackendSignals->OnProp4Changed.Remove(OnProp4ChangedHandle);
			OnProp4ChangedHandle.Reset();
		}
		if (OnSig1SignalHandle.IsValid())
		{
			BackendSignals->OnSig1Signal.Remove(OnSig1SignalHandle);
			OnSig1SignalHandle.Reset();
		}
		if (OnSig2SignalHandle.IsValid())
		{
			BackendSignals->OnSig2Signal.Remove(OnSig2SignalHandle);
			OnSig2SignalHandle.Reset();
		}
		if (OnSig3SignalHandle.IsValid())
		{
			BackendSignals->OnSig3Signal.Remove(OnSig3SignalHandle);
			OnSig3SignalHandle.Reset();
		}
		if (OnSig4SignalHandle.IsValid())
		{
			BackendSignals->OnSig4Signal.Remove(OnSig4SignalHandle);
			OnSig4SignalHandle.Reset();
		}
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface Testbed2ManyParamInterface is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTestbed2ManyParamInterfaceSignals* BackendSignals = BackendService->_GetSignals();
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service Testbed2ManyParamInterface"));
	// connect property changed signals or simple events
	OnProp1ChangedHandle = BackendSignals->OnProp1Changed.AddUObject(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnProp1Changed);
	OnProp2ChangedHandle = BackendSignals->OnProp2Changed.AddUObject(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnProp2Changed);
	OnProp3ChangedHandle = BackendSignals->OnProp3Changed.AddUObject(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnProp3Changed);
	OnProp4ChangedHandle = BackendSignals->OnProp4Changed.AddUObject(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnProp4Changed);
	OnSig1SignalHandle = BackendSignals->OnSig1Signal.AddUObject(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnSig1);
	OnSig2SignalHandle = BackendSignals->OnSig2Signal.AddUObject(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnSig2);
	OnSig3SignalHandle = BackendSignals->OnSig3Signal.AddUObject(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnSig3);
	OnSig4SignalHandle = BackendSignals->OnSig4Signal.AddUObject(this, &UTestbed2ManyParamInterfaceMsgBusAdapter::OnSig4);
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnDiscoveryMessage(const FTestbed2ManyParamInterfaceDiscoveryMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	switch (InMessage.Type)
	{
	case ETestbed2ManyParamInterfaceDiscoveryMessageType::ServiceAnnouncement:
		HandleServiceAnnouncement(Context);
		break;
	case ETestbed2ManyParamInterfaceDiscoveryMessageType::ConnectionRequest:
	default:
		HandleClientConnectionRequest(Context);
		break;
	}
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::HandleClientConnectionRequest(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new FTestbed2ManyParamInterfaceInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;
	msg->Prop1 = BackendService->GetProp1();
	msg->Prop2 = BackendService->GetProp2();
	msg->Prop3 = BackendService->GetProp3();
	msg->Prop4 = BackendService->GetProp4();

	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid())
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Send<FTestbed2ManyParamInterfaceInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::HandleServiceAnnouncement(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	// send service announcement
	auto msg = new FTestbed2ManyParamInterfaceServiceAnnouncementReplyMessage();

	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid())
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Send<FTestbed2ManyParamInterfaceServiceAnnouncementReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnServiceAnnouncementMessage(const FTestbed2ManyParamInterfaceServiceAnnouncementReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (Testbed2ManyParamInterfaceMsgBusEndpoint->GetAddress() == Context->GetSender())
	{
		return;
	}
	UE_LOG(LogTestbed2ManyParamInterfaceMsgBusAdapter, Error, TEXT("Service announcement from existing endpoint(%s) received, we should stop listening."), *Context->GetSender().ToString());
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnPing(const FTestbed2ManyParamInterfacePingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTestbed2ManyParamInterfacePongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid())
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Send<FTestbed2ManyParamInterfacePongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnClientDisconnected(const FTestbed2ManyParamInterfaceClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

bool UTestbed2ManyParamInterfaceMsgBusAdapter::_CheckClientTimeoutsTick(float /*DeltaTime*/)
{
	_CheckClientTimeouts();
	return true;
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::_CheckClientTimeouts()
{
	const double CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double DeltaMS = (CurrentTime - ClientPair.Value) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnFunc1Request(const FTestbed2ManyParamInterfaceFunc1RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTestbed2ManyParamInterfaceFunc1ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Func1(InMessage.Param1);

	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid())
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Send<FTestbed2ManyParamInterfaceFunc1ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnFunc2Request(const FTestbed2ManyParamInterfaceFunc2RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTestbed2ManyParamInterfaceFunc2ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Func2(InMessage.Param1, InMessage.Param2);

	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid())
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Send<FTestbed2ManyParamInterfaceFunc2ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnFunc3Request(const FTestbed2ManyParamInterfaceFunc3RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTestbed2ManyParamInterfaceFunc3ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Func3(InMessage.Param1, InMessage.Param2, InMessage.Param3);

	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid())
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Send<FTestbed2ManyParamInterfaceFunc3ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnFunc4Request(const FTestbed2ManyParamInterfaceFunc4RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTestbed2ManyParamInterfaceFunc4ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Func4(InMessage.Param1, InMessage.Param2, InMessage.Param3, InMessage.Param4);

	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid())
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Send<FTestbed2ManyParamInterfaceFunc4ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnSig1(int32 InParam1)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed2ManyParamInterfaceSig1SignalMessage();
	msg->Param1 = InParam1;
	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Send<FTestbed2ManyParamInterfaceSig1SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnSig2(int32 InParam1, int32 InParam2)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed2ManyParamInterfaceSig2SignalMessage();
	msg->Param1 = InParam1;
	msg->Param2 = InParam2;
	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Send<FTestbed2ManyParamInterfaceSig2SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnSig3(int32 InParam1, int32 InParam2, int32 InParam3)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed2ManyParamInterfaceSig3SignalMessage();
	msg->Param1 = InParam1;
	msg->Param2 = InParam2;
	msg->Param3 = InParam3;
	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Send<FTestbed2ManyParamInterfaceSig3SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnSig4(int32 InParam1, int32 InParam2, int32 InParam3, int32 InParam4)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed2ManyParamInterfaceSig4SignalMessage();
	msg->Param1 = InParam1;
	msg->Param2 = InParam2;
	msg->Param3 = InParam3;
	msg->Param4 = InParam4;
	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Send<FTestbed2ManyParamInterfaceSig4SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnSetProp1Request(const FTestbed2ManyParamInterfaceSetProp1RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetProp1(InMessage.Prop1);
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnProp1Changed(int32 InProp1)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed2ManyParamInterfaceProp1ChangedMessage();
	msg->Prop1 = InProp1;

	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Send<FTestbed2ManyParamInterfaceProp1ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnSetProp2Request(const FTestbed2ManyParamInterfaceSetProp2RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetProp2(InMessage.Prop2);
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnProp2Changed(int32 InProp2)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed2ManyParamInterfaceProp2ChangedMessage();
	msg->Prop2 = InProp2;

	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Send<FTestbed2ManyParamInterfaceProp2ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnSetProp3Request(const FTestbed2ManyParamInterfaceSetProp3RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetProp3(InMessage.Prop3);
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnProp3Changed(int32 InProp3)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed2ManyParamInterfaceProp3ChangedMessage();
	msg->Prop3 = InProp3;

	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Send<FTestbed2ManyParamInterfaceProp3ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnSetProp4Request(const FTestbed2ManyParamInterfaceSetProp4RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetProp4(InMessage.Prop4);
}

void UTestbed2ManyParamInterfaceMsgBusAdapter::OnProp4Changed(int32 InProp4)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed2ManyParamInterfaceProp4ChangedMessage();
	msg->Prop4 = InProp4;

	if (Testbed2ManyParamInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed2ManyParamInterfaceMsgBusEndpoint->Send<FTestbed2ManyParamInterfaceProp4ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
