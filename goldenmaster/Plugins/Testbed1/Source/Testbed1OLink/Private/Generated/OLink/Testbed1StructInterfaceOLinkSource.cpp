/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Testbed1StructInterfaceOLinkSource.h"
#include "HAL/Platform.h"
#include "OLinkCommon.h"
#if !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)
#include "Async/Future.h"
#include "Async/Async.h"
#include "Testbed1/Generated/api/Testbed1.json.adapter.h"
#include "OLinkClientConnection.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
THIRD_PARTY_INCLUDES_START
#include "olink/iobjectsource.h"
THIRD_PARTY_INCLUDES_END

using namespace ApiGear::ObjectLink;

namespace
{
static const std::string Testbed1StructInterfaceIdentifier{"testbed1.StructInterface"};
}

DEFINE_LOG_CATEGORY(LogTestbed1StructInterfaceOLinkSource);
Testbed1StructInterfaceOLinkSource::Testbed1StructInterfaceOLinkSource()
	: Host(nullptr)
{
}

void Testbed1StructInterfaceOLinkSource::setBackendService(TScriptInterface<ITestbed1StructInterface> InService)
{
	// only set if interface is implemented
	if (InService.GetInterface() == nullptr)
	{
		UE_LOG(LogTestbed1StructInterfaceOLinkSource, Error, TEXT("Cannot set backend service - interface Testbed1StructInterface is not fully implemented"));
		return;
	}

	BackendService = InService;
}
void Testbed1StructInterfaceOLinkSource::OnSigBool(const FTestbed1StructBool& ParamBool)
{
	static const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "sigBool");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(signalId);
	const nlohmann::json& args = {ParamBool};
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifySignal(signalId, args);
		}
	}
}

void Testbed1StructInterfaceOLinkSource::OnSigInt(const FTestbed1StructInt& ParamInt)
{
	static const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "sigInt");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(signalId);
	const nlohmann::json& args = {ParamInt};
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifySignal(signalId, args);
		}
	}
}

void Testbed1StructInterfaceOLinkSource::OnSigFloat(const FTestbed1StructFloat& ParamFloat)
{
	static const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "sigFloat");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(signalId);
	const nlohmann::json& args = {ParamFloat};
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifySignal(signalId, args);
		}
	}
}

void Testbed1StructInterfaceOLinkSource::OnSigString(const FTestbed1StructString& ParamString)
{
	static const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "sigString");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(signalId);
	const nlohmann::json& args = {ParamString};
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifySignal(signalId, args);
		}
	}
}

void Testbed1StructInterfaceOLinkSource::OnPropBoolChanged(const FTestbed1StructBool& InPropBool)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "propBool");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InPropBool);
		}
	}
}

void Testbed1StructInterfaceOLinkSource::OnPropIntChanged(const FTestbed1StructInt& InPropInt)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "propInt");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InPropInt);
		}
	}
}

void Testbed1StructInterfaceOLinkSource::OnPropFloatChanged(const FTestbed1StructFloat& InPropFloat)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "propFloat");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InPropFloat);
		}
	}
}

void Testbed1StructInterfaceOLinkSource::OnPropStringChanged(const FTestbed1StructString& InPropString)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "propString");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InPropString);
		}
	}
}

void Testbed1StructInterfaceOLinkSource::setOLinkHost(TSoftObjectPtr<UOLinkHost> InHost)
{
	Host = InHost.Get();
}

//
// IObjectSource interface
//

std::string Testbed1StructInterfaceOLinkSource::olinkObjectName()
{
	return Testbed1StructInterfaceIdentifier;
}

nlohmann::json Testbed1StructInterfaceOLinkSource::olinkInvoke(const std::string& methodId, const nlohmann::json& args)
{
	if (!BackendService)
	{
		UE_LOG(LogTestbed1StructInterfaceOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter Testbed1StructInterfaceOLinkAdapter which implements the Testbed1StructInterface interface"));
		return nlohmann::json();
	}

	const std::string path = Name::getMemberName(methodId);
	if (path == "funcBool")
	{
		FTestbed1StructBool ParamBool = args.at(0).get<FTestbed1StructBool>();
		FTestbed1StructBool result = BackendService->FuncBool(ParamBool);
		return result;
	}
	if (path == "funcInt")
	{
		FTestbed1StructInt ParamInt = args.at(0).get<FTestbed1StructInt>();
		FTestbed1StructInt result = BackendService->FuncInt(ParamInt);
		return result;
	}
	if (path == "funcFloat")
	{
		FTestbed1StructFloat ParamFloat = args.at(0).get<FTestbed1StructFloat>();
		FTestbed1StructFloat result = BackendService->FuncFloat(ParamFloat);
		return result;
	}
	if (path == "funcString")
	{
		FTestbed1StructString ParamString = args.at(0).get<FTestbed1StructString>();
		FTestbed1StructString result = BackendService->FuncString(ParamString);
		return result;
	}
	return nlohmann::json();
}

void Testbed1StructInterfaceOLinkSource::olinkSetProperty(const std::string& propertyId, const nlohmann::json& value)
{
	if (!BackendService)
	{
		UE_LOG(LogTestbed1StructInterfaceOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter Testbed1StructInterfaceOLinkAdapter which implements the Testbed1StructInterface interface"));
		return;
	}

	const std::string path = Name::getMemberName(propertyId);
	if (path == "propBool")
	{
		FTestbed1StructBool PropBool = value.get<FTestbed1StructBool>();
		BackendService->SetPropBool(PropBool);
	}
	if (path == "propInt")
	{
		FTestbed1StructInt PropInt = value.get<FTestbed1StructInt>();
		BackendService->SetPropInt(PropInt);
	}
	if (path == "propFloat")
	{
		FTestbed1StructFloat PropFloat = value.get<FTestbed1StructFloat>();
		BackendService->SetPropFloat(PropFloat);
	}
	if (path == "propString")
	{
		FTestbed1StructString PropString = value.get<FTestbed1StructString>();
		BackendService->SetPropString(PropString);
	}
}

nlohmann::json Testbed1StructInterfaceOLinkSource::olinkCollectProperties()
{
	if (!BackendService)
	{
		UE_LOG(LogTestbed1StructInterfaceOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter Testbed1StructInterfaceOLinkAdapter which implements the Testbed1StructInterface interface"));
		return nlohmann::json();
	}

	return nlohmann::json::object({

		{"propBool", BackendService->GetPropBool()},
		{"propInt", BackendService->GetPropInt()},
		{"propFloat", BackendService->GetPropFloat()},
		{"propString", BackendService->GetPropString()}});
}
#endif // !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)
