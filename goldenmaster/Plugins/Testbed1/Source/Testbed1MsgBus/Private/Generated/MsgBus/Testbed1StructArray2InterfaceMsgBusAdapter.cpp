/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Testbed1/Generated/MsgBus/Testbed1StructArray2InterfaceMsgBusAdapter.h"
#include "Testbed1/Generated/MsgBus/Testbed1StructArray2InterfaceMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/World.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
#include "Testbed1Settings.h"

DEFINE_LOG_CATEGORY(LogTestbed1StructArray2InterfaceMsgBusAdapter);
UTestbed1StructArray2InterfaceMsgBusAdapter::UTestbed1StructArray2InterfaceMsgBusAdapter()
{
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::_StartListening()
{

	if (!_HeartbeatTickerHandle.IsValid())
	{
		UTestbed1Settings* settings = GetMutableDefault<UTestbed1Settings>();
		check(settings);
		_HeartbeatIntervalMS = settings->MsgBusHeartbeatIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#else
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}

	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	Testbed1StructArray2InterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/Testbed1/StructArray2Interface/Service")
		.Handling<FTestbed1StructArray2InterfaceDiscoveryMessage>(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnDiscoveryMessage)
		.Handling<FTestbed1StructArray2InterfaceServiceAnnouncementReplyMessage>(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnServiceAnnouncementMessage)
		.Handling<FTestbed1StructArray2InterfacePingMessage>(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnPing)
		.Handling<FTestbed1StructArray2InterfaceClientDisconnectMessage>(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnClientDisconnected)
		.Handling<FTestbed1StructArray2InterfaceSetPropBoolRequestMessage>(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnSetPropBoolRequest)
		.Handling<FTestbed1StructArray2InterfaceSetPropIntRequestMessage>(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnSetPropIntRequest)
		.Handling<FTestbed1StructArray2InterfaceSetPropFloatRequestMessage>(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnSetPropFloatRequest)
		.Handling<FTestbed1StructArray2InterfaceSetPropStringRequestMessage>(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnSetPropStringRequest)
		.Handling<FTestbed1StructArray2InterfaceSetPropEnumRequestMessage>(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnSetPropEnumRequest)
		.Handling<FTestbed1StructArray2InterfaceFuncBoolRequestMessage>(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnFuncBoolRequest)
		.Handling<FTestbed1StructArray2InterfaceFuncIntRequestMessage>(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnFuncIntRequest)
		.Handling<FTestbed1StructArray2InterfaceFuncFloatRequestMessage>(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnFuncFloatRequest)
		.Handling<FTestbed1StructArray2InterfaceFuncStringRequestMessage>(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnFuncStringRequest)
		.Handling<FTestbed1StructArray2InterfaceFuncEnumRequestMessage>(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnFuncEnumRequest)
		.Build();
	// clang-format on

	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid())
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Subscribe<FTestbed1StructArray2InterfaceDiscoveryMessage>();
		Testbed1StructArray2InterfaceMsgBusEndpoint->Subscribe<FTestbed1StructArray2InterfaceServiceAnnouncementReplyMessage>();
	}

	_AnnounceService();
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::_AnnounceService()
{
	if (!Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FTestbed1StructArray2InterfaceDiscoveryMessage();
	msg->Type = ETestbed1StructArray2InterfaceDiscoveryMessageType::ServiceAnnouncement;
	Testbed1StructArray2InterfaceMsgBusEndpoint->Publish<FTestbed1StructArray2InterfaceDiscoveryMessage>(msg);
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::_StopListening()
{
	if (_HeartbeatTickerHandle.IsValid())
	{
#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#endif
	}

	auto msg = new FTestbed1StructArray2InterfaceServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfaceServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	Testbed1StructArray2InterfaceMsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool UTestbed1StructArray2InterfaceMsgBusAdapter::_IsListening() const
{
	return Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid();
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::_setBackendService(TScriptInterface<ITestbed1StructArray2Interface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTestbed1StructArray2InterfaceSignals* BackendSignals = BackendService->_GetSignals();
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service Testbed1StructArray2Interface"));
		if (OnPropBoolChangedHandle.IsValid())
		{
			BackendSignals->OnPropBoolChanged.Remove(OnPropBoolChangedHandle);
			OnPropBoolChangedHandle.Reset();
		}
		if (OnPropIntChangedHandle.IsValid())
		{
			BackendSignals->OnPropIntChanged.Remove(OnPropIntChangedHandle);
			OnPropIntChangedHandle.Reset();
		}
		if (OnPropFloatChangedHandle.IsValid())
		{
			BackendSignals->OnPropFloatChanged.Remove(OnPropFloatChangedHandle);
			OnPropFloatChangedHandle.Reset();
		}
		if (OnPropStringChangedHandle.IsValid())
		{
			BackendSignals->OnPropStringChanged.Remove(OnPropStringChangedHandle);
			OnPropStringChangedHandle.Reset();
		}
		if (OnPropEnumChangedHandle.IsValid())
		{
			BackendSignals->OnPropEnumChanged.Remove(OnPropEnumChangedHandle);
			OnPropEnumChangedHandle.Reset();
		}
		if (OnSigBoolSignalHandle.IsValid())
		{
			BackendSignals->OnSigBoolSignal.Remove(OnSigBoolSignalHandle);
			OnSigBoolSignalHandle.Reset();
		}
		if (OnSigIntSignalHandle.IsValid())
		{
			BackendSignals->OnSigIntSignal.Remove(OnSigIntSignalHandle);
			OnSigIntSignalHandle.Reset();
		}
		if (OnSigFloatSignalHandle.IsValid())
		{
			BackendSignals->OnSigFloatSignal.Remove(OnSigFloatSignalHandle);
			OnSigFloatSignalHandle.Reset();
		}
		if (OnSigStringSignalHandle.IsValid())
		{
			BackendSignals->OnSigStringSignal.Remove(OnSigStringSignalHandle);
			OnSigStringSignalHandle.Reset();
		}
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface Testbed1StructArray2Interface is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTestbed1StructArray2InterfaceSignals* BackendSignals = BackendService->_GetSignals();
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service Testbed1StructArray2Interface"));
	// connect property changed signals or simple events
	OnPropBoolChangedHandle = BackendSignals->OnPropBoolChanged.AddUObject(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnPropBoolChanged);
	OnPropIntChangedHandle = BackendSignals->OnPropIntChanged.AddUObject(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnPropIntChanged);
	OnPropFloatChangedHandle = BackendSignals->OnPropFloatChanged.AddUObject(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnPropFloatChanged);
	OnPropStringChangedHandle = BackendSignals->OnPropStringChanged.AddUObject(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnPropStringChanged);
	OnPropEnumChangedHandle = BackendSignals->OnPropEnumChanged.AddUObject(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnPropEnumChanged);
	OnSigBoolSignalHandle = BackendSignals->OnSigBoolSignal.AddUObject(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnSigBool);
	OnSigIntSignalHandle = BackendSignals->OnSigIntSignal.AddUObject(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnSigInt);
	OnSigFloatSignalHandle = BackendSignals->OnSigFloatSignal.AddUObject(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnSigFloat);
	OnSigStringSignalHandle = BackendSignals->OnSigStringSignal.AddUObject(this, &UTestbed1StructArray2InterfaceMsgBusAdapter::OnSigString);
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnDiscoveryMessage(const FTestbed1StructArray2InterfaceDiscoveryMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	switch (InMessage.Type)
	{
	case ETestbed1StructArray2InterfaceDiscoveryMessageType::ServiceAnnouncement:
		HandleServiceAnnouncement(Context);
		break;
	case ETestbed1StructArray2InterfaceDiscoveryMessageType::ConnectionRequest:
	default:
		HandleClientConnectionRequest(Context);
		break;
	}
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::HandleClientConnectionRequest(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new FTestbed1StructArray2InterfaceInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;
	msg->PropBool = BackendService->GetPropBool();
	msg->PropInt = BackendService->GetPropInt();
	msg->PropFloat = BackendService->GetPropFloat();
	msg->PropString = BackendService->GetPropString();
	msg->PropEnum = BackendService->GetPropEnum();

	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid())
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfaceInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::HandleServiceAnnouncement(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	// send service announcement
	auto msg = new FTestbed1StructArray2InterfaceServiceAnnouncementReplyMessage();

	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid())
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfaceServiceAnnouncementReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnServiceAnnouncementMessage(const FTestbed1StructArray2InterfaceServiceAnnouncementReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (Testbed1StructArray2InterfaceMsgBusEndpoint->GetAddress() == Context->GetSender())
	{
		return;
	}
	UE_LOG(LogTestbed1StructArray2InterfaceMsgBusAdapter, Error, TEXT("Service announcement from existing endpoint(%s) received, we should stop listening."), *Context->GetSender().ToString());
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnPing(const FTestbed1StructArray2InterfacePingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTestbed1StructArray2InterfacePongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid())
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfacePongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnClientDisconnected(const FTestbed1StructArray2InterfaceClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

bool UTestbed1StructArray2InterfaceMsgBusAdapter::_CheckClientTimeoutsTick(float /*DeltaTime*/)
{
	_CheckClientTimeouts();
	return true;
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::_CheckClientTimeouts()
{
	const double CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double DeltaMS = (CurrentTime - ClientPair.Value) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnFuncBoolRequest(const FTestbed1StructArray2InterfaceFuncBoolRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTestbed1StructArray2InterfaceFuncBoolReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->FuncBool(InMessage.ParamBool);

	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid())
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfaceFuncBoolReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnFuncIntRequest(const FTestbed1StructArray2InterfaceFuncIntRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTestbed1StructArray2InterfaceFuncIntReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->FuncInt(InMessage.ParamInt);

	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid())
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfaceFuncIntReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnFuncFloatRequest(const FTestbed1StructArray2InterfaceFuncFloatRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTestbed1StructArray2InterfaceFuncFloatReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->FuncFloat(InMessage.ParamFloat);

	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid())
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfaceFuncFloatReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnFuncStringRequest(const FTestbed1StructArray2InterfaceFuncStringRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTestbed1StructArray2InterfaceFuncStringReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->FuncString(InMessage.ParamString);

	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid())
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfaceFuncStringReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnFuncEnumRequest(const FTestbed1StructArray2InterfaceFuncEnumRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTestbed1StructArray2InterfaceFuncEnumReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->FuncEnum(InMessage.ParamEnum);

	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid())
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfaceFuncEnumReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnSigBool(const FTestbed1StructBoolWithArray& InParamBool)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed1StructArray2InterfaceSigBoolSignalMessage();
	msg->ParamBool = InParamBool;
	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfaceSigBoolSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnSigInt(const FTestbed1StructIntWithArray& InParamInt)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed1StructArray2InterfaceSigIntSignalMessage();
	msg->ParamInt = InParamInt;
	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfaceSigIntSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnSigFloat(const FTestbed1StructFloatWithArray& InParamFloat)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed1StructArray2InterfaceSigFloatSignalMessage();
	msg->ParamFloat = InParamFloat;
	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfaceSigFloatSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnSigString(const FTestbed1StructStringWithArray& InParamString)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed1StructArray2InterfaceSigStringSignalMessage();
	msg->ParamString = InParamString;
	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfaceSigStringSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnSetPropBoolRequest(const FTestbed1StructArray2InterfaceSetPropBoolRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetPropBool(InMessage.PropBool);
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnPropBoolChanged(const FTestbed1StructBoolWithArray& InPropBool)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed1StructArray2InterfacePropBoolChangedMessage();
	msg->PropBool = InPropBool;

	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfacePropBoolChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnSetPropIntRequest(const FTestbed1StructArray2InterfaceSetPropIntRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetPropInt(InMessage.PropInt);
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnPropIntChanged(const FTestbed1StructIntWithArray& InPropInt)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed1StructArray2InterfacePropIntChangedMessage();
	msg->PropInt = InPropInt;

	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfacePropIntChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnSetPropFloatRequest(const FTestbed1StructArray2InterfaceSetPropFloatRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetPropFloat(InMessage.PropFloat);
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnPropFloatChanged(const FTestbed1StructFloatWithArray& InPropFloat)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed1StructArray2InterfacePropFloatChangedMessage();
	msg->PropFloat = InPropFloat;

	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfacePropFloatChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnSetPropStringRequest(const FTestbed1StructArray2InterfaceSetPropStringRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetPropString(InMessage.PropString);
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnPropStringChanged(const FTestbed1StructStringWithArray& InPropString)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed1StructArray2InterfacePropStringChangedMessage();
	msg->PropString = InPropString;

	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfacePropStringChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnSetPropEnumRequest(const FTestbed1StructArray2InterfaceSetPropEnumRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetPropEnum(InMessage.PropEnum);
}

void UTestbed1StructArray2InterfaceMsgBusAdapter::OnPropEnumChanged(const FTestbed1StructEnumWithArray& InPropEnum)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed1StructArray2InterfacePropEnumChangedMessage();
	msg->PropEnum = InPropEnum;

	if (Testbed1StructArray2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed1StructArray2InterfaceMsgBusEndpoint->Send<FTestbed1StructArray2InterfacePropEnumChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
