/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbRefInterfacesImport/Generated/MsgBus/TbRefInterfacesImportCounterMsgBusAdapter.h"
#include "TbRefInterfacesImport/Generated/MsgBus/TbRefInterfacesImportCounterMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/World.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
#include "TbRefInterfacesImportSettings.h"

DEFINE_LOG_CATEGORY(LogTbRefInterfacesImportCounterMsgBusAdapter);
UTbRefInterfacesImportCounterMsgBusAdapter::UTbRefInterfacesImportCounterMsgBusAdapter()
{
}

void UTbRefInterfacesImportCounterMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbRefInterfacesImportCounterMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTbRefInterfacesImportCounterMsgBusAdapter::_StartListening()
{

	if (!_HeartbeatTickerHandle.IsValid())
	{
		UTbRefInterfacesImportSettings* settings = GetMutableDefault<UTbRefInterfacesImportSettings>();
		check(settings);
		_HeartbeatIntervalMS = settings->MsgBusHeartbeatIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefInterfacesImportCounterMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#else
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefInterfacesImportCounterMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}

	if (TbRefInterfacesImportCounterMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	TbRefInterfacesImportCounterMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbRefInterfacesImport/Counter/Service")
		.Handling<FTbRefInterfacesImportCounterDiscoveryMessage>(this, &UTbRefInterfacesImportCounterMsgBusAdapter::OnDiscoveryMessage)
		.Handling<FTbRefInterfacesImportCounterServiceAnnouncementReplyMessage>(this, &UTbRefInterfacesImportCounterMsgBusAdapter::OnServiceAnnouncementMessage)
		.Handling<FTbRefInterfacesImportCounterPingMessage>(this, &UTbRefInterfacesImportCounterMsgBusAdapter::OnPing)
		.Handling<FTbRefInterfacesImportCounterClientDisconnectMessage>(this, &UTbRefInterfacesImportCounterMsgBusAdapter::OnClientDisconnected)
		.Build();
	// clang-format on

	if (TbRefInterfacesImportCounterMsgBusEndpoint.IsValid())
	{
		TbRefInterfacesImportCounterMsgBusEndpoint->Subscribe<FTbRefInterfacesImportCounterDiscoveryMessage>();
		TbRefInterfacesImportCounterMsgBusEndpoint->Subscribe<FTbRefInterfacesImportCounterServiceAnnouncementReplyMessage>();
	}

	_AnnounceService();
}

void UTbRefInterfacesImportCounterMsgBusAdapter::_AnnounceService()
{
	if (!TbRefInterfacesImportCounterMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FTbRefInterfacesImportCounterDiscoveryMessage();
	msg->Type = ETbRefInterfacesImportCounterDiscoveryMessageType::ServiceAnnouncement;
	TbRefInterfacesImportCounterMsgBusEndpoint->Publish<FTbRefInterfacesImportCounterDiscoveryMessage>(msg);
}

void UTbRefInterfacesImportCounterMsgBusAdapter::_StopListening()
{
	if (_HeartbeatTickerHandle.IsValid())
	{
#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#endif
	}

	auto msg = new FTbRefInterfacesImportCounterServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if (TbRefInterfacesImportCounterMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefInterfacesImportCounterMsgBusEndpoint->Send<FTbRefInterfacesImportCounterServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbRefInterfacesImportCounterMsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool UTbRefInterfacesImportCounterMsgBusAdapter::_IsListening() const
{
	return TbRefInterfacesImportCounterMsgBusEndpoint.IsValid();
}

void UTbRefInterfacesImportCounterMsgBusAdapter::_setBackendService(TScriptInterface<ITbRefInterfacesImportCounter> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbRefInterfacesImportCounter is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	// connect property changed signals or simple events
}

void UTbRefInterfacesImportCounterMsgBusAdapter::OnDiscoveryMessage(const FTbRefInterfacesImportCounterDiscoveryMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	switch (InMessage.Type)
	{
	case ETbRefInterfacesImportCounterDiscoveryMessageType::ServiceAnnouncement:
		HandleServiceAnnouncement(Context);
		break;
	case ETbRefInterfacesImportCounterDiscoveryMessageType::ConnectionRequest:
	default:
		HandleClientConnectionRequest(Context);
		break;
	}
}

void UTbRefInterfacesImportCounterMsgBusAdapter::HandleClientConnectionRequest(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new FTbRefInterfacesImportCounterInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;

	if (TbRefInterfacesImportCounterMsgBusEndpoint.IsValid())
	{
		TbRefInterfacesImportCounterMsgBusEndpoint->Send<FTbRefInterfacesImportCounterInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void UTbRefInterfacesImportCounterMsgBusAdapter::HandleServiceAnnouncement(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	// send service announcement
	auto msg = new FTbRefInterfacesImportCounterServiceAnnouncementReplyMessage();

	if (TbRefInterfacesImportCounterMsgBusEndpoint.IsValid())
	{
		TbRefInterfacesImportCounterMsgBusEndpoint->Send<FTbRefInterfacesImportCounterServiceAnnouncementReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefInterfacesImportCounterMsgBusAdapter::OnServiceAnnouncementMessage(const FTbRefInterfacesImportCounterServiceAnnouncementReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (TbRefInterfacesImportCounterMsgBusEndpoint->GetAddress() == Context->GetSender())
	{
		return;
	}
	UE_LOG(LogTbRefInterfacesImportCounterMsgBusAdapter, Error, TEXT("Service announcement from existing endpoint(%s) received, we should stop listening."), *Context->GetSender().ToString());
}

void UTbRefInterfacesImportCounterMsgBusAdapter::OnPing(const FTbRefInterfacesImportCounterPingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbRefInterfacesImportCounterPongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if (TbRefInterfacesImportCounterMsgBusEndpoint.IsValid())
	{
		TbRefInterfacesImportCounterMsgBusEndpoint->Send<FTbRefInterfacesImportCounterPongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefInterfacesImportCounterMsgBusAdapter::OnClientDisconnected(const FTbRefInterfacesImportCounterClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

bool UTbRefInterfacesImportCounterMsgBusAdapter::_CheckClientTimeoutsTick(float /*DeltaTime*/)
{
	_CheckClientTimeouts();
	return true;
}

void UTbRefInterfacesImportCounterMsgBusAdapter::_CheckClientTimeouts()
{
	const double CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double DeltaMS = (CurrentTime - ClientPair.Value) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void UTbRefInterfacesImportCounterMsgBusAdapter::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}
