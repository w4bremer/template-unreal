/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbRefInterfacesImport/Generated/MsgBus/TbRefInterfacesImportCounterMsgBusClient.h"
#include "TbRefInterfacesImport/Generated/MsgBus/TbRefInterfacesImportCounterMsgBusMessages.h"
#include "Async/Async.h"
#include "Engine/World.h"
#include "Misc/DateTime.h"
#include "GenericPlatform/GenericPlatformMath.h"
#include "GenericPlatform/GenericPlatformTime.h"
#include "MessageEndpointBuilder.h"
#include "MessageEndpoint.h"
#include "TbRefInterfacesImportSettings.h"
DEFINE_LOG_CATEGORY(LogTbRefInterfacesImportCounterMsgBusClient);

UTbRefInterfacesImportCounterMsgBusClient::UTbRefInterfacesImportCounterMsgBusClient()
	: UAbstractTbRefInterfacesImportCounter()
{
	PingRTTBuffer.SetNumZeroed(PING_RTT_BUFFER_SIZE);
}

UTbRefInterfacesImportCounterMsgBusClient::~UTbRefInterfacesImportCounterMsgBusClient() = default;

void UTbRefInterfacesImportCounterMsgBusClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbRefInterfacesImportCounterMsgBusClient::Deinitialize()
{
	_Disconnect();

	Super::Deinitialize();
}

void UTbRefInterfacesImportCounterMsgBusClient::_Connect()
{
	if (_IsConnected())
	{
		UE_LOG(LogTbRefInterfacesImportCounterMsgBusClient, Log, TEXT("Already connected, cannot connect again."));
		return;
	}

	if (!_HeartbeatTickerHandle.IsValid())
	{
		UTbRefInterfacesImportSettings* settings = GetMutableDefault<UTbRefInterfacesImportSettings>();
		check(settings);
		_HeartbeatIntervalMS = settings->MsgBusHeartbeatIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefInterfacesImportCounterMsgBusClient::_OnHeartbeatTick), _HeartbeatIntervalMS / 1000.0f);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefInterfacesImportCounterMsgBusClient::_OnHeartbeatTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}

	if (TbRefInterfacesImportCounterMsgBusEndpoint.IsValid() && !ServiceAddress.IsValid())
	{
		_DiscoverService();
		return;
	}

	// clang-format off
	TbRefInterfacesImportCounterMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbRefInterfacesImport/Counter/Client")
		.Handling<FTbRefInterfacesImportCounterInitMessage>(this, &UTbRefInterfacesImportCounterMsgBusClient::OnConnectionInit)
		.Handling<FTbRefInterfacesImportCounterPongMessage>(this, &UTbRefInterfacesImportCounterMsgBusClient::OnPong)
		.Handling<FTbRefInterfacesImportCounterServiceDisconnectMessage>(this, &UTbRefInterfacesImportCounterMsgBusClient::OnServiceClosedConnection)
		.Build();
	// clang-format on

	_DiscoverService();
}

void UTbRefInterfacesImportCounterMsgBusClient::_Disconnect()
{
	_LastHbTimestamp = 0.0f;

#if (ENGINE_MAJOR_VERSION < 5)
	FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#else
	FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#endif

	if (!_IsConnected())
	{
		return;
	}

	auto msg = new FTbRefInterfacesImportCounterClientDisconnectMessage();

	TbRefInterfacesImportCounterMsgBusEndpoint->Send<FTbRefInterfacesImportCounterClientDisconnectMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	TbRefInterfacesImportCounterMsgBusEndpoint.Reset();
	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
	_ConnectionStatusChangedBP.Broadcast(false);
}

void UTbRefInterfacesImportCounterMsgBusClient::_DiscoverService()
{
	if (!TbRefInterfacesImportCounterMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FTbRefInterfacesImportCounterDiscoveryMessage();
	TbRefInterfacesImportCounterMsgBusEndpoint->Publish<FTbRefInterfacesImportCounterDiscoveryMessage>(msg);
}

bool UTbRefInterfacesImportCounterMsgBusClient::_IsConnected() const
{
	return TbRefInterfacesImportCounterMsgBusEndpoint.IsValid() && ServiceAddress.IsValid();
}

void UTbRefInterfacesImportCounterMsgBusClient::OnConnectionInit(const FTbRefInterfacesImportCounterInitMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress.IsValid())
	{
		UE_LOG(LogTbRefInterfacesImportCounterMsgBusClient, Warning,
			TEXT("Got a second init message. It usually means that there are several instances of the same service on the network.")
				TEXT(" This can cause connection mixups. Please make sure that there is only one instance of the service running on the network."));
		return;
	}

	ServiceAddress = Context->GetSender();
	// reset ping stats for a new connection
	PingRTTBuffer.Empty();
	PingRTTBuffer.SetNumZeroed(PING_RTT_BUFFER_SIZE);
	CurrentPingCounter = 0;
	Stats.CurrentRTT_MS = 0.0f;
	Stats.AverageRTT_MS = 0.0f;
	Stats.MaxRTT_MS = 0.0f;
	Stats.MinRTT_MS = 10000.0f;

	const bool b_ClientPingIntervalMSChanged = InMessage._ClientPingIntervalMS != _HeartbeatIntervalMS;
	if (b_ClientPingIntervalMSChanged)
	{
		_HeartbeatIntervalMS = InMessage._ClientPingIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefInterfacesImportCounterMsgBusClient::_OnHeartbeatTick), _HeartbeatIntervalMS / 1000.0f);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefInterfacesImportCounterMsgBusClient::_OnHeartbeatTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}

	_ConnectionStatusChanged.Broadcast(true);
	_ConnectionStatusChangedBP.Broadcast(true);
}

bool UTbRefInterfacesImportCounterMsgBusClient::_OnHeartbeatTick(float /*DeltaTime*/)
{
	_OnHeartbeat();
	return true;
}

void UTbRefInterfacesImportCounterMsgBusClient::_OnHeartbeat()
{
	if (_LastHbTimestamp > 0.1)
	{
		const double DeltaMS = (FPlatformTime::Seconds() - _LastHbTimestamp) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			ServiceAddress.Invalidate();
			_LastHbTimestamp = 0.0;
			_ConnectionStatusChanged.Broadcast(false);
		}
	}

	if (!_IsConnected())
	{
		// only log warning message once a second
		if (FPlatformTime::Seconds() - _LastConnectionWarningTimestamp > 1.0)
		{
			UE_LOG(LogTbRefInterfacesImportCounterMsgBusClient, Warning, TEXT("Heartbeat failed. Client has no connection to service. Reconnecting ..."));
			_LastConnectionWarningTimestamp = FPlatformTime::Seconds();
		}

		_Connect();
		return;
	}

	auto msg = new FTbRefInterfacesImportCounterPingMessage();
	msg->Timestamp = FPlatformTime::Seconds();

	TbRefInterfacesImportCounterMsgBusEndpoint->Send<FTbRefInterfacesImportCounterPingMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
}

float UTbRefInterfacesImportCounterMsgBusClient::_CalculateAverageRTT() const
{
	if (CurrentPingCounter == 0)
	{
		return 0.0f;
	}

	float TotalRTT = 0.0f;

	for (const float& RTT : PingRTTBuffer)
	{
		TotalRTT += RTT;
	}

	return CurrentPingCounter > 0 ? TotalRTT / CurrentPingCounter : 0.0f;
}

void UTbRefInterfacesImportCounterMsgBusClient::OnPong(const FTbRefInterfacesImportCounterPongMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	_LastHbTimestamp = InMessage.Timestamp;

	const double Current = FPlatformTime::Seconds();
	const double DeltaMS = (Current - InMessage.Timestamp) * 1000.0f;

	Stats.CurrentRTT_MS = DeltaMS;
	if (CurrentPingCounter < PING_RTT_BUFFER_SIZE)
	{
		CurrentPingCounter++;
	}
	PingRTTBuffer.RemoveAt(0);
	PingRTTBuffer.Add(Stats.CurrentRTT_MS);
	Stats.AverageRTT_MS = _CalculateAverageRTT();
	Stats.MaxRTT_MS = FGenericPlatformMath::Max(Stats.MaxRTT_MS, Stats.CurrentRTT_MS);
	Stats.MinRTT_MS = FGenericPlatformMath::Min(Stats.MinRTT_MS, Stats.CurrentRTT_MS);

	_StatsUpdated.Broadcast(Stats);
}

const FTbRefInterfacesImportCounterStats& UTbRefInterfacesImportCounterMsgBusClient::_GetStats() const
{
	return Stats;
}

void UTbRefInterfacesImportCounterMsgBusClient::OnServiceClosedConnection(const FTbRefInterfacesImportCounterServiceDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		return;
	}

	_LastHbTimestamp = 0.0;
	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
	_ConnectionStatusChangedBP.Broadcast(false);
}
