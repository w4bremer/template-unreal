"use strict";(self.webpackChunkunreal_template_docs=self.webpackChunkunreal_template_docs||[]).push([[894],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(n),d=l,h=m["".concat(p,".").concat(d)]||m[d]||c[d]||i;return n?a.createElement(h,r(r({ref:t},u),{},{components:n})):a.createElement(h,r({ref:t},u))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},42:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(7462),l=(n(7294),n(3905));const i={sidebar_position:2},r="Quick-Start",o={unversionedId:"quickstart/index",id:"quickstart/index",title:"Quick-Start",description:"This document only explains the bare minimum needed to know to get from an API description to a functional Unreal Engine plugin.",source:"@site/docs/quickstart/index.md",sourceDirName:"quickstart",slug:"/quickstart/",permalink:"/template-unreal/quickstart/",draft:!1,editUrl:"https://github.com/apigear-io/template-unreal/edit/main/docs/quickstart/index.md",tags:[],version:"current",lastUpdatedBy:"Wolfgang Bremer",lastUpdatedAt:1675709643,formattedLastUpdatedAt:"Feb 6, 2023",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Introduction",permalink:"/template-unreal/intro"},next:{title:"Features",permalink:"/template-unreal/category/features"}},p={},s=[{value:"1. Install the code generator",id:"1-install-the-code-generator",level:2},{value:"2. Get the template",id:"2-get-the-template",level:2},{value:"Installation via CLI",id:"installation-via-cli",level:3},{value:"Installation via Studio",id:"installation-via-studio",level:3},{value:"Clone from github",id:"clone-from-github",level:3},{value:"3. Set up project",id:"3-set-up-project",level:2},{value:"Solution file",id:"solution-file",level:3},{value:"API module file",id:"api-module-file",level:3},{value:"4. Generate code",id:"4-generate-code",level:2},{value:"Generate via CLI",id:"generate-via-cli",level:3},{value:"Generate via Studio",id:"generate-via-studio",level:3},{value:"5. Use the plugin in your <em>Unreal Engine</em> project",id:"5-use-the-plugin-in-your-unreal-engine-project",level:2},{value:"Blueprint",id:"blueprint",level:3},{value:"C++",id:"c",level:3}],u={toc:s};function m(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"quick-start"},"Quick-Start"),(0,l.kt)("p",null,"This document only explains the bare minimum needed to know to get from an API description to a functional ",(0,l.kt)("em",{parentName:"p"},"Unreal Engine")," plugin."),(0,l.kt)("h2",{id:"1-install-the-code-generator"},"1. Install the code generator"),(0,l.kt)("p",null,"Get the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/apigear-io/studio-releases/releases"},"ApiGear Studio")," or ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/apigear-io/cli-releases/releases"},"ApiGear CLI"),". For more information check the ",(0,l.kt)("a",{parentName:"p",href:"https://docs.apigear.io/docs/start/install"},"ApiGear documentation"),"."),(0,l.kt)("h2",{id:"2-get-the-template"},"2. Get the template"),(0,l.kt)("p",null,"There are several options to get the template. Installation via the ",(0,l.kt)("em",{parentName:"p"},"Studio")," or the ",(0,l.kt)("em",{parentName:"p"},"CLI"),". Alternatively it is possible to clone, to download from github."),(0,l.kt)("h3",{id:"installation-via-cli"},"Installation via CLI"),(0,l.kt)("p",null,"When using the ",(0,l.kt)("em",{parentName:"p"},"CLI")," only the highlighted line is imported. You can always check whether installation was successful via the ",(0,l.kt)("inlineCode",{parentName:"p"},"template list")," command."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ apigear template list\nlist of templates from registry and cache\nname                       | installed | registry | url\napigear-io/template-unreal | false     | true     | https://github.com/apigear-io/template-unreal.git\n...\n# highlight-next-line\n$ apigear template install apigear-io/template-unreal\n$ apigear template list\nlist of templates from registry and cache\nname                       | installed | registry | url\napigear-io/template-unreal | true      | true     | https://github.com/apigear-io/template-unreal.git\n...\n")),(0,l.kt)("h3",{id:"installation-via-studio"},"Installation via Studio"),(0,l.kt)("p",null,"From within the studio the installation is really simple."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Open an existing project or create an new one"),(0,l.kt)("li",{parentName:"ol"},"Go to the ",(0,l.kt)("inlineCode",{parentName:"li"},"Templates")," tab"),(0,l.kt)("li",{parentName:"ol"},"Click ",(0,l.kt)("inlineCode",{parentName:"li"},"Install")," on the ",(0,l.kt)("inlineCode",{parentName:"li"},"apigear-io/template-unreal")," entry")),(0,l.kt)("h3",{id:"clone-from-github"},"Clone from github"),(0,l.kt)("p",null,"In case you want to check or modify the source code of the template, it is easier to clone or download the repository."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ git clone https://github.com/apigear-io/template-unreal.git\n")),(0,l.kt)("h2",{id:"3-set-up-project"},"3. Set up project"),(0,l.kt)("p",null,"For a project we usually need two files. The solution which specifies what ",(0,l.kt)("inlineCode",{parentName:"p"},"APIs")," and which template to use for it. And at least one ",(0,l.kt)("inlineCode",{parentName:"p"},"API")," module file.\nBot should ideally be in a folder called ",(0,l.kt)("inlineCode",{parentName:"p"},"apigear")," next to each other."),(0,l.kt)("p",null,"Alternatively, you can also use the ",(0,l.kt)("em",{parentName:"p"},"Studio")," to create a new project and modify the two example files."),(0,l.kt)("h3",{id:"solution-file"},"Solution file"),(0,l.kt)("p",null,"Create a ",(0,l.kt)("a",{parentName:"p",href:"https://docs.apigear.io/docs/start/first_steps#create-a-solution"},"solution")," file.\nThe example below specifies"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the ",(0,l.kt)("inlineCode",{parentName:"li"},"helloworld.module.yaml")," which contains the API in ",(0,l.kt)("em",{parentName:"li"},"line 8")),(0,l.kt)("li",{parentName:"ul"},"the output directory in ",(0,l.kt)("em",{parentName:"li"},"line 9")),(0,l.kt)("li",{parentName:"ul"},"the ",(0,l.kt)("inlineCode",{parentName:"li"},"apigear-ui/template-unreal")," to be used in ",(0,l.kt)("em",{parentName:"li"},"line 10")),(0,l.kt)("li",{parentName:"ul"},"enables ",(0,l.kt)("inlineCode",{parentName:"li"},"all")," features of the template in ",(0,l.kt)("em",{parentName:"li"},"line 13"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="helloworld.solution.yaml" showLineNumbers',title:'"helloworld.solution.yaml"',showLineNumbers:!0},'schema: "apigear.solution/1.0"\nname: ue_docs\nversion: "0.1"\n\nlayers:\n  - name: ue_docs\n    inputs:\n      - helloworld.module.yaml\n    output: ../ue_docs\n    template: apigear-io/template-unreal\n    force: true\n    features:\n      - all\n')),(0,l.kt)("h3",{id:"api-module-file"},"API module file"),(0,l.kt)("p",null,"Create the ",(0,l.kt)("inlineCode",{parentName:"p"},"helloworld.module.yaml")," with the example content:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="helloworld.module.yaml"',title:'"helloworld.module.yaml"'},'schema: apigear.module/1.0\nname: io.world\nversion: "1.0"\n\ninterfaces:\n  - name: Hello\n    properties:\n      - { name: last, type: Message }\n    operations:\n      - name: say\n        params:\n          - { name: msg, type: Message }\n          - { name: when, type: When }\n        return:\n          type: int\n    signals:\n      - name: justSaid\n        params:\n          - { name: msg, type: Message }\nenums:\n  - name: When\n    members:\n      - { name: Now, value: 0 }\n      - { name: Soon, value: 1 }\n      - { name: Never, value: 2 }\nstructs:\n  - name: Message\n    fields:\n      - { name: content, type: string }\n')),(0,l.kt)("h2",{id:"4-generate-code"},"4. Generate code"),(0,l.kt)("p",null,"For the code generation we assume that both ",(0,l.kt)("em",{parentName:"p"},"ApiGear")," files reside in an ",(0,l.kt)("inlineCode",{parentName:"p"},"apigear")," subfolder next to the ",(0,l.kt)("em",{parentName:"p"},"Unreal Engine")," project.\nIn this case the folder structure should look similar to this"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\ud83d\udce6ue_docs_exmaple_project\n \u2523 \ud83d\udcc2apigear\n \u2503 \u2523 \ud83d\udcdchelloworld.solution.yaml\n \u2503 \u2517 \ud83d\udcdchelloworld.module.yaml\n \u2523 \ud83d\udcc2ue_docs\n \u2503 \u2523 \ud83d\udcc2Config\n \u2503 \u2523 \ud83d\udcc2Content\n \u2503 \u2523 \ud83d\udcc2Platforms\n \u2503 \u2523 \ud83d\udcc2Plugins\n \u2503 \u2523 \ud83d\udcc2Source\n \u2503 \u2517 \ud83d\udcdcue_docs.uproject\n")),(0,l.kt)("p",null,"With the solution file from the previous paragraph the code will be generated in the ",(0,l.kt)("inlineCode",{parentName:"p"},"ue_docs/Plugins")," folder."),(0,l.kt)("h3",{id:"generate-via-cli"},"Generate via CLI"),(0,l.kt)("p",null,"The following snippet shows how the CLI can be run."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ apigear g s apigear/helloworld.solution.yaml \n17:52:20 INF generated 92 files in 30ms. (33 write, 0 skip, 59 copy) topic=gen\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"g")," tells the CLI that it should generate code"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"s")," specifies that we want to run a solution file")),(0,l.kt)("h3",{id:"generate-via-studio"},"Generate via Studio"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Open the project"),(0,l.kt)("li",{parentName:"ol"},"Go to the ",(0,l.kt)("inlineCode",{parentName:"li"},"Solutions")," tab"),(0,l.kt)("li",{parentName:"ol"},"Click ",(0,l.kt)("inlineCode",{parentName:"li"},"Run")," on the ",(0,l.kt)("inlineCode",{parentName:"li"},"helloworld.solution.yaml")," entry")),(0,l.kt)("h2",{id:"5-use-the-plugin-in-your-unreal-engine-project"},"5. Use the plugin in your ",(0,l.kt)("em",{parentName:"h2"},"Unreal Engine")," project"),(0,l.kt)("h3",{id:"blueprint"},"Blueprint"),(0,l.kt)("h3",{id:"c"},"C++"))}m.isMDXComponent=!0}}]);