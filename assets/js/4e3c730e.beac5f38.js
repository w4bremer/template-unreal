"use strict";(self.webpackChunkunreal_template_docs=self.webpackChunkunreal_template_docs||[]).push([[983],{2589:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));a(814);const r={sidebar_position:1},o="Introduction",l={unversionedId:"features/api/intro",id:"features/api/intro",title:"Introduction",description:"The feature api is the bare minimum for the code generation. For interfaces it only generates the header files. For data types like enums or structs it will also generate a basic implementation.",source:"@site/docs/features/api/intro.mdx",sourceDirName:"features/api",slug:"/features/api/intro",permalink:"/template-unreal/features/api/intro",draft:!1,editUrl:"https://github.com/apigear-io/template-unreal/edit/main/docs/features/api/intro.mdx",tags:[],version:"current",lastUpdatedBy:"Wolfgang Bremer",lastUpdatedAt:1675942837,formattedLastUpdatedAt:"Feb 9, 2023",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"api",permalink:"/template-unreal/category/api"},next:{title:"Interface",permalink:"/template-unreal/features/api/interface"}},s={},p=[{value:"Module",id:"module",level:2},{value:"File overview",id:"file-overview",level:2}],d={toc:p};function m(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"feature")," ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," is the bare minimum for the code generation. For interfaces it only generates the header files. For data types like ",(0,i.kt)("em",{parentName:"p"},"enums")," or ",(0,i.kt)("em",{parentName:"p"},"structs")," it will also generate a basic implementation."),(0,i.kt)("h2",{id:"module"},"Module"),(0,i.kt)("p",null,"Before we look into the generated files, it is important to understand the file and class naming.\nEach API module generates an independent ",(0,i.kt)("em",{parentName:"p"},"plugin"),'. The name of the plugin is based on the name of the module, here for instance "',(0,i.kt)("strong",{parentName:"p"},"world"),'".'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"showLineNumbers",showLineNumbers:!0},'schema: apigear.module/1.0\n// highlight-next-line\nname: world\nversion: "1.0"\n')),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("em",{parentName:"p"},"Unreal Engine")," requires unique file and type names. Therefore, ",(0,i.kt)("strong",{parentName:"p"},"all")," names are prefixed with the module name.",(0,i.kt)("br",null),"\nThis also makes it easier for users to identify own types and functions within the engine."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"It is important to choose the module name wisely."))),(0,i.kt)("h2",{id:"file-overview"},"File overview"),(0,i.kt)("p",null,"When selecting the ",(0,i.kt)("em",{parentName:"p"},"api")," feature the following structure will be generated."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{8,12-14}"},"\ud83d\udce6Plugins\n \u2517 \ud83d\udcc2World\n \u2503 \u2517 \ud83d\udcc2Source\n \u2503 \u2503 \u2517 \ud83d\udcc2World\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2Private\n \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcc2Generated\n \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcc2api\n \u2503 \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcWorld_data.cpp\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcc2Public\n \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcc2Generated\n \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcc2api\n \u2503 \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcWorldHelloInterface.h\n \u2503 \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcWorld_apig.h\n \u2503 \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcWorld_data.h\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\ud83d\udcdcWorldHelloInterface.h")," contains the declaration for the only ",(0,i.kt)("a",{parentName:"li",href:"interface"},"interface")," in this example"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\ud83d\udcdcWorld_apig.h")," is a convenience header which includes all separate interface headers"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\ud83d\udcdcWorld_data.h")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"\ud83d\udcdcWorld_data.cpp")," contain declarations and definitions for ",(0,i.kt)("a",{parentName:"li",href:"enums"},"enums")," and ",(0,i.kt)("a",{parentName:"li",href:"structs"},"structs")," for the complete module")))}m.isMDXComponent=!0}}]);