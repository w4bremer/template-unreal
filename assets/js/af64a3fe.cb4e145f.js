"use strict";(self.webpackChunkunreal_template_docs=self.webpackChunkunreal_template_docs||[]).push([[255],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,g=c["".concat(s,".").concat(d)]||c[d]||u[d]||l;return n?a.createElement(g,i(i({ref:t},m),{},{components:n})):a.createElement(g,i({ref:t},m))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2571:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:2},i="Interface",o={unversionedId:"features/api/interface",id:"features/api/interface",title:"Interface",description:"The interface is at the core of ObjectAPI and offers an Unreal specific implementation for handling data in projects.",source:"@site/docs/features/api/interface.md",sourceDirName:"features/api",slug:"/features/api/interface",permalink:"/template-unreal/features/api/interface",draft:!1,editUrl:"https://github.com/apigear-io/template-unreal/edit/main/docs/features/api/interface.md",tags:[],version:"current",lastUpdatedBy:"Wolfgang Bremer",lastUpdatedAt:1676907919,formattedLastUpdatedAt:"Feb 20, 2023",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Introduction",permalink:"/template-unreal/features/api/intro"},next:{title:"Enums",permalink:"/template-unreal/features/api/enums"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Operations",id:"operations",level:2},{value:"Signals",id:"signals",level:2},{value:"Properties",id:"properties",level:2},{value:"Usage",id:"usage",level:2},{value:"Blueprint",id:"blueprint",level:3},{value:"C++",id:"c",level:3}],m={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interface"},"Interface"),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"interface")," is at the core of ",(0,r.kt)("a",{parentName:"p",href:"https://docs.apigear.io/objectapi/modules.html#interfaces"},"ObjectAPI")," and offers an ",(0,r.kt)("em",{parentName:"p"},"Unreal")," specific implementation for handling data in projects."),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Every interface is designed to be used in ",(0,r.kt)("em",{parentName:"p"},"blueprints")," and ",(0,r.kt)("em",{parentName:"p"},"C++"),", as we well as to provide the business logic either in ",(0,r.kt)("em",{parentName:"p"},"blueprints")," or in ",(0,r.kt)("em",{parentName:"p"},"C++"),".\nFor more information on using and implementing interfaces in Blueprints check the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unrealengine.com/implementing-blueprint-interfaces-in-unreal-engine/"},"documentation"),"."),(0,r.kt)("p",null,"In the example we have an interface called ",(0,r.kt)("em",{parentName:"p"},"Hello"),". It has a property ",(0,r.kt)("em",{parentName:"p"},"last")," of type ",(0,r.kt)("em",{parentName:"p"},"Message"),".\nThe operation ",(0,r.kt)("em",{parentName:"p"},"say")," can be used to say a ",(0,r.kt)("em",{parentName:"p"},"msg")," and specify ",(0,r.kt)("em",{parentName:"p"},"when"),".\nThe signal ",(0,r.kt)("em",{parentName:"p"},"justSaid")," could trigger when something was just said."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'showLineNumbers {2,3,5,12} title="helloworld.module.yml interface section"',showLineNumbers:!0,"{2,3,5,12}":!0,title:'"helloworld.module.yml',interface:!0,'section"':!0},"interfaces:\n  - name: Hello\n    properties:\n      - { name: last, type: Message }\n    operations:\n      - name: say\n        params:\n          - { name: msg, type: Message }\n          - { name: when, type: When }\n        return:\n          type: int\n    signals:\n      - name: justSaid\n        params:\n          - { name: msg, type: Message }\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The following explains the pure interface declaration. This can be used to inherit from it via ",(0,r.kt)("em",{parentName:"p"},"blueprints")," or ",(0,r.kt)("em",{parentName:"p"},"C++")," and provide your business logic.\nIf you want to start with a ",(0,r.kt)("em",{parentName:"p"},"stub")," implementation check out the ",(0,r.kt)("a",{parentName:"p",href:"/template-unreal/features/stubs/intro"},"stubs")," feature. There you only need to add your own logic.")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"In ",(0,r.kt)("em",{parentName:"p"},"Unreal Engine C++")," this interface is declared as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"{2,7} showLineNumbers","{2,7}":!0,showLineNumbers:!0},"UINTERFACE(Blueprintable, MinimalAPI)\nclass UIoWorldHelloInterface : public UInterface\n{\n    GENERATED_BODY()\n};\n\nclass IOWORLD_API IIoWorldHelloInterface\n{\n    GENERATED_BODY()\n\npublic:\n   ...\n};\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Blueprintable")," allows the use as a base class in ",(0,r.kt)("em",{parentName:"li"},"Blueprints")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"WORLD_API")," generates the proper import/export statements, this must match the module name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"IWorldHelloInterface")," the name of the interface consists of the ",(0,r.kt)("em",{parentName:"li"},"module")," name and the specific ",(0,r.kt)("em",{parentName:"li"},"interface")," name from the API specification")),(0,r.kt)("p",null,"For more information please check the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unrealengine.com/ProgrammingAndScripting/GameplayArchitecture/Interfaces/"},(0,r.kt)("em",{parentName:"a"},"Unreal Engine")," interface documentation"),"."),(0,r.kt)("h2",{id:"operations"},"Operations"),(0,r.kt)("p",null,"In our example we have an ",(0,r.kt)("inlineCode",{parentName:"p"},"say")," operation specified as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'{2,4} showLineNumbers title="helloworld.module.yml interface operations section"',"{2,4}":!0,showLineNumbers:!0,title:'"helloworld.module.yml',interface:!0,operations:!0,'section"':!0},"    operations:\n      - name: say\n        params:\n          - { name: msg, type: Message }\n          - { name: when, type: When }\n        return:\n          type: int\n")),(0,r.kt)("p",null,"Before we can explain the declaration of the ",(0,r.kt)("em",{parentName:"p"},"operation")," itself, we need to explain a few ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unrealengine.com/ufunctions-in-unreal-engine/"},(0,r.kt)("strong",{parentName:"a"},"UFUNCTION")," (documentation)")," macro keywords."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"BlueprintNativeEvent")," this function can be implemented in ",(0,r.kt)("em",{parentName:"li"},"Unreal Blueprints")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"BlueprintCallable")," this function can be called from ",(0,r.kt)("em",{parentName:"li"},"Unreal Blueprints")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Latent")," this meta keyword enables functions to be run asynchronously")),(0,r.kt)("p",null,"Every operation in the API has at least two declarations in the generated interface."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The operation itself e.g.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"}," int32 Say(const FIoWorldMessage& Msg, const EIoWorldWhen& When);\n"))," Due to the ",(0,r.kt)("em",{parentName:"li"},"BlueprintNativeEvent")," this function is implemented by the ",(0,r.kt)("em",{parentName:"li"},"Unreal Engine")," and ",(0,r.kt)("strong",{parentName:"li"},"can not be overridden in ",(0,r.kt)("em",{parentName:"strong"},"C++"))," by the user. This should only be overridden when inheriting in ",(0,r.kt)("em",{parentName:"li"},"blueprints"),"."),(0,r.kt)("li",{parentName:"ol"},"The operation with the ",(0,r.kt)("em",{parentName:"li"},"_Implementation")," postfix, e.g.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual int32 Say_Implementation(const FIoWorldMessage& Msg, const EIoWorldWhen& When) = 0;\n")),"is a pure virtual function and ",(0,r.kt)("strong",{parentName:"li"},"has to be overridden in ",(0,r.kt)("em",{parentName:"strong"},"C++"))," by the user when inheriting.")),(0,r.kt)("p",null,"In case, the operation has a return value we generate additional declarations with an ",(0,r.kt)("em",{parentName:"p"},"Async")," postfix.\nFor instance, the ",(0,r.kt)("em",{parentName:"p"},"say")," function has four different functions declared."),(0,r.kt)("p",null,"The complete declaration looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'    UFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = "ApiGear|IoWorld|Hello", meta = (Latent, LatentInfo = "LatentInfo", HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject"))\n    void SayAsync(UObject* WorldContextObject, FLatentActionInfo LatentInfo, int32& Result, const FIoWorldMessage& Msg, EIoWorldWhen When);\n    virtual void SayAsync_Implementation(UObject* WorldContextObject, FLatentActionInfo LatentInfo, int32& Result, const FIoWorldMessage& Msg, EIoWorldWhen When) = 0;\n\n    UFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = "ApiGear|IoWorld|Hello")\n    int32 Say(const FIoWorldMessage& Msg, EIoWorldWhen When);\n    virtual int32 Say_Implementation(const FIoWorldMessage& Msg, EIoWorldWhen When) = 0;\n')),(0,r.kt)("h2",{id:"signals"},"Signals"),(0,r.kt)("p",null,"In our example we have a ",(0,r.kt)("inlineCode",{parentName:"p"},"justSaid")," signal specified as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'{2,4} showLineNumbers title="helloworld.module.yml interface signals section"',"{2,4}":!0,showLineNumbers:!0,title:'"helloworld.module.yml',interface:!0,signals:!0,'section"':!0},"    signals:\n      - name: justSaid\n        params:\n          - { name: msg, type: Message }\n")),(0,r.kt)("p",null,"For signal handling we use ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unrealengine.com/delegates-and-lamba-functions-in-unreal-engine/"},"dynamic multicast delegates"),".\nThese delegates must be declared before use, for instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FIoWorldHelloJustSaidDelegate, const FIoWorldMessage&, Msg);\n")),(0,r.kt)("p",null,"This signal has one parameter which must be added as postfix ",(0,r.kt)("inlineCode",{parentName:"p"},"_OneParam"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FIoWorldHelloJustSaidDelegate")," is the name of the delegate type. It is constructed based on the ",(0,r.kt)("em",{parentName:"li"},"module"),", ",(0,r.kt)("em",{parentName:"li"},"interface")," name and the actual name of the ",(0,r.kt)("em",{parentName:"li"},"signal")," from line ",(0,r.kt)("em",{parentName:"li"},"2")," above"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"const FIoWorldMessage&")," is the type of the signal parameter and ",(0,r.kt)("inlineCode",{parentName:"li"},"Msg")," the name")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Delegates cannot be exposed to ",(0,r.kt)("em",{parentName:"p"},"Blueprints")," via ",(0,r.kt)("em",{parentName:"p"},"C++")," interfaces. Therefore we must add some helper functions")),(0,r.kt)("p",null,"All implementations of the interface can now specify this ",(0,r.kt)("em",{parentName:"p"},"delegate")," and consumers can bind to it."),(0,r.kt)("p",null,"However, this is the pure interface declaration and we cannot use any actual type.\nTherefore we added getters for the delegate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'UFUNCTION(Category = "ApiGear|IoWorld|Hello")\nvirtual FIoWorldHelloJustSaidDelegate& GetJustSaidSignalDelegate() = 0;\n')),(0,r.kt)("p",null,"Every actual implementation must return its own delegate in this function for consumers to bind to the delegate."),(0,r.kt)("p",null,"Also if we want to trigger this delegate from within a ",(0,r.kt)("em",{parentName:"p"},"blueprint")," we need to call another helper function ",(0,r.kt)("em",{parentName:"p"},"broadcast"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'UFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = "ApiGear|IoWorld|Hello", meta = (BlueprintProtected = "true"))\nvoid BroadcastJustSaid(const FIoWorldMessage& Msg);\nvirtual void BroadcastJustSaid_Implementation(const FIoWorldMessage& Msg) = 0;\n')),(0,r.kt)("p",null,"And again, the actual implementation must call ",(0,r.kt)("em",{parentName:"p"},"broadcast")," on its delegate within this function."),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("p",null,"In our example we have a ",(0,r.kt)("inlineCode",{parentName:"p"},"last")," property specified as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'{2} showLineNumbers title="helloworld.module.yml interface properties section"',"{2}":!0,showLineNumbers:!0,title:'"helloworld.module.yml',interface:!0,properties:!0,'section"':!0},"    properties:\n      - { name: last, type: Message }\n")),(0,r.kt)("p",null,"Every property automatically has a ",(0,r.kt)("em",{parentName:"p"},"setter"),", a ",(0,r.kt)("em",{parentName:"p"},"getter")," and a ",(0,r.kt)("em",{parentName:"p"},"changed")," signal. It is basically a combination of the operations and signals declaration above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'// property delegates\nDECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FIoWorldHelloLastChangedDelegate, const FIoWorldMessage&, Last);\n\n...\n\nclass IOWORLD_API IIoWorldHelloInterface\n{\n    GENERATED_BODY()\n\npublic:\n    UFUNCTION(Category = "ApiGear|IoWorld|Hello")\n    virtual FIoWorldHelloLastChangedDelegate& GetLastChangedDelegate() = 0;\n\n...\n    // properties\n    UFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = "ApiGear|IoWorld|Hello")\n    FIoWorldMessage GetLast() const;\n    virtual FIoWorldMessage GetLast_Implementation() const = 0;\n\n    UFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = "ApiGear|IoWorld|Hello")\n    void SetLast(const FIoWorldMessage& Last);\n    virtual void SetLast_Implementation(const FIoWorldMessage& Last) = 0;\n\nprotected:\n    UFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = "ApiGear|IoWorld|Hello", meta = (BlueprintProtected = "true"))\n    void BroadcastLastChanged(const FIoWorldMessage& Last);\n    virtual void BroadcastLastChanged_Implementation(const FIoWorldMessage& Last) = 0;\n};\n')),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"blueprint"},"Blueprint"),(0,r.kt)("h3",{id:"c"},"C++"))}c.isMDXComponent=!0}}]);