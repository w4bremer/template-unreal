{{- /* Copyright Epic Games, Inc. All Rights Reserved */ -}}
/**{{ template "copyright" }}*/
{{- $ModuleName := Camel .Module.Name}}
{{- $IfaceName := Camel .Interface.Name }}
{{- $Category := printf "ApiGear|%s|%s" $ModuleName $IfaceName }}
{{- $DisplayName := printf "%s%s" $ModuleName $IfaceName }}
{{- $Class := printf "U%sMsgBusAdapter" $DisplayName}}
{{- $Iface := printf "%s%s" $ModuleName $IfaceName }}
{{- $ifaceId := printf "%s.%s" .Module.Name .Interface.Name}}

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "{{$ModuleName}}/Generated/MsgBus/{{$Iface}}MsgBusAdapter.h"
#include "{{$ModuleName}}/Generated/MsgBus/{{$Iface}}MsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/World.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
#include "{{$ModuleName}}Settings.h"

DEFINE_LOG_CATEGORY(Log{{$Iface}}MsgBusAdapter);

{{- if .Interface.Description }}
/**
   \brief {{.Interface.Description}}
*/
{{- end }}
{{$Class}}::{{$Class}}()
{
}

void {{$Class}}::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void {{$Class}}::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void {{$Class}}::_StartListening()
{

	if (!_HeartbeatTickerHandle.IsValid())
	{
		U{{$ModuleName}}Settings* settings = GetMutableDefault<U{{$ModuleName}}Settings>();
		check(settings);
		_HeartbeatIntervalMS = settings->MsgBusHeartbeatIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &{{$Class}}::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#else
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &{{$Class}}::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}

	if ({{$Iface}}MsgBusEndpoint.IsValid())
		return;

	// clang-format off
	{{$Iface}}MsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/{{$ModuleName}}/{{$IfaceName}}/Service")
		.Handling<F{{$Iface}}DiscoveryMessage>(this, &{{$Class}}::OnDiscoveryMessage)
		.Handling<F{{$Iface}}ServiceAnnouncementReplyMessage>(this, &{{$Class}}::OnServiceAnnouncementMessage)
		.Handling<F{{$Iface}}PingMessage>(this, &{{$Class}}::OnPing)
		.Handling<F{{$Iface}}ClientDisconnectMessage>(this, &{{$Class}}::OnClientDisconnected)
{{- range $i, $e := .Interface.Properties }}
{{- if not .IsReadOnly }}
		.Handling<F{{$Iface}}Set{{Camel .Name}}RequestMessage>(this, &{{$Class}}::OnSet{{Camel .Name}}Request)
{{- end }}
{{- end }}
{{- range $i, $e := .Interface.Operations }}
		.Handling<F{{$Iface}}{{Camel .Name}}RequestMessage>(this, &{{$Class}}::On{{Camel .Name}}Request)
{{- end }}
		.Build();
	// clang-format on

	if ({{$Iface}}MsgBusEndpoint.IsValid())
	{
		{{$Iface}}MsgBusEndpoint->Subscribe<F{{$Iface}}DiscoveryMessage>();
		{{$Iface}}MsgBusEndpoint->Subscribe<F{{$Iface}}ServiceAnnouncementReplyMessage>();
	}

	_AnnounceService();
}

void {{$Class}}::_AnnounceService()
{
	if (!{{$Iface}}MsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new F{{$Iface}}DiscoveryMessage();
	msg->Type = E{{$Iface}}DiscoveryMessageType::ServiceAnnouncement;
	{{$Iface}}MsgBusEndpoint->Publish<F{{$Iface}}DiscoveryMessage>(msg);
}

void {{$Class}}::_StopListening()
{
	if (_HeartbeatTickerHandle.IsValid())
	{
#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#endif
	}

	auto msg = new F{{$Iface}}ServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if ({{$Iface}}MsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		{{$Iface}}MsgBusEndpoint->Send<F{{$Iface}}ServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	{{$Iface}}MsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool {{$Class}}::_IsListening() const
{
	return {{$Iface}}MsgBusEndpoint.IsValid();
}

void {{$Class}}::_setBackendService(TScriptInterface<I{{$Iface}}> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
{{- if or (len .Interface.Properties) (.Interface.Signals) }}
		U{{$Iface}}Signals* BackendSignals = BackendService->_GetSignals();
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service {{$Iface}}"));
{{- end }}
{{- range .Interface.Properties }}
		if (On{{Camel .Name}}ChangedHandle.IsValid())
		{
			BackendSignals->On{{Camel .Name}}Changed.Remove(On{{Camel .Name}}ChangedHandle);
			On{{Camel .Name}}ChangedHandle.Reset();
		}
{{- end }}
{{- range .Interface.Signals }}
		if (On{{Camel .Name}}SignalHandle.IsValid())
		{
			BackendSignals->On{{Camel .Name}}Signal.Remove(On{{Camel .Name}}SignalHandle);
			On{{Camel .Name}}SignalHandle.Reset();
		}
{{- end }}
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface {{$Iface}} is not fully implemented"));

	// subscribe to new backend
{{- $Service := printf "I%s" $Iface }}
	BackendService = InService;
{{- if or (len .Interface.Properties) (.Interface.Signals) }}
	U{{$Iface}}Signals* BackendSignals = BackendService->_GetSignals();
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service {{$Iface}}"));
{{- end }}
	// connect property changed signals or simple events
{{- range .Interface.Properties }}
	On{{Camel .Name}}ChangedHandle = BackendSignals->On{{Camel .Name}}Changed.AddUObject(this, &{{$Class}}::On{{Camel .Name}}Changed);
{{- end }}
{{- range .Interface.Signals }}
	On{{Camel .Name}}SignalHandle = BackendSignals->On{{Camel .Name}}Signal.AddUObject(this, &{{$Class}}::On{{Camel .Name}});
{{- end }}
}

void {{$Class}}::OnDiscoveryMessage(const F{{$Iface}}DiscoveryMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	switch (InMessage.Type)
	{
	case E{{$Iface}}DiscoveryMessageType::ServiceAnnouncement:
		HandleServiceAnnouncement(Context);
		break;
	case E{{$Iface}}DiscoveryMessageType::ConnectionRequest:
	default:
		HandleClientConnectionRequest(Context);
		break;
	}
}

void {{$Class}}::HandleClientConnectionRequest(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new F{{$Iface}}InitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;

{{- range $i, $e := .Interface.Properties }}
	msg->{{ueVar "" .}} = BackendService->Get{{Camel .Name}}();
{{- end }}

	if ({{$Iface}}MsgBusEndpoint.IsValid())
	{
		{{$Iface}}MsgBusEndpoint->Send<F{{$Iface}}InitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void {{$Class}}::HandleServiceAnnouncement(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	// send service announcement
	auto msg = new F{{$Iface}}ServiceAnnouncementReplyMessage();

	if ({{$Iface}}MsgBusEndpoint.IsValid())
	{
		{{$Iface}}MsgBusEndpoint->Send<F{{$Iface}}ServiceAnnouncementReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void {{$Class}}::OnServiceAnnouncementMessage(const F{{$Iface}}ServiceAnnouncementReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if ({{$Iface}}MsgBusEndpoint->GetAddress() == Context->GetSender())
	{
		return;
	}
	UE_LOG(Log{{$Iface}}MsgBusAdapter, Error, TEXT("Service announcement from existing endpoint(%s) received, we should stop listening."), *Context->GetSender().ToString());
}

void {{$Class}}::OnPing(const F{{$Iface}}PingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new F{{$Iface}}PongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if ({{$Iface}}MsgBusEndpoint.IsValid())
	{
		{{$Iface}}MsgBusEndpoint->Send<F{{$Iface}}PongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void {{$Class}}::OnClientDisconnected(const F{{$Iface}}ClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

bool {{$Class}}::_CheckClientTimeoutsTick(float /*DeltaTime*/)
{
	_CheckClientTimeouts();
	return true;
}

void {{$Class}}::_CheckClientTimeouts()
{
	const double CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double DeltaMS = (CurrentTime - ClientPair.Value) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void {{$Class}}::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}
{{- range .Interface.Operations }}

void {{$Class}}::On{{Camel .Name}}Request(const F{{$Iface}}{{Camel .Name}}RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
{{- if .Return.IsVoid }}
	BackendService->{{Camel .Name}}(
{{- range $i, $e := .Params -}}
	{{ if $i }}, {{end}}InMessage.{{ueVar "" .}}
{{- end -}}
	);
{{- else }}
	auto msg = new F{{$Iface}}{{Camel .Name}}ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->{{Camel .Name}}(
{{- range $i, $e := .Params -}}
	{{ if $i }}, {{end}}InMessage.{{ueVar "" .}}
{{- end -}}
	);

	if ({{$Iface}}MsgBusEndpoint.IsValid())
	{
		{{$Iface}}MsgBusEndpoint->Send<F{{$Iface}}{{Camel .Name}}ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
{{- end }}
}
{{- end }}
{{- range .Interface.Signals }}

void {{$Class}}::On{{Camel .Name}}({{ueParams "In" .Params}})
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new F{{$Iface}}{{Camel .Name}}SignalMessage();
{{- range $i, $e := .Params }}
	msg->{{ueVar "" .}} = {{ueVar "In" .}};
{{- end }}
	if ({{$Iface}}MsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		{{$Iface}}MsgBusEndpoint->Send<F{{$Iface}}{{Camel .Name}}SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
{{- end }}
{{- range .Interface.Properties }}
{{- if not .IsReadOnly }}

void {{$Class}}::OnSet{{Camel .Name}}Request(const F{{$Iface}}Set{{Camel .Name}}RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Set{{Camel .Name}}(InMessage.{{ueVar "" .}});
}
{{- end }}

void {{$Class}}::On{{Camel .Name}}Changed({{ueParam "In" .}})
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new F{{$Iface}}{{Camel .Name}}ChangedMessage();
	msg->{{ueVar "" .}} = {{ueVar "In" .}};

	if ({{$Iface}}MsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		{{$Iface}}MsgBusEndpoint->Send<F{{$Iface}}{{Camel .Name}}ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
{{- end }}
